{
id: "civ_board",
hitpoints: 2,
zorder: -11,
no_compile_image: "experimental/civ-tile.png",
properties: {
	tile_side_name: "def(name) switch(name.animation, 'normal', ~White~, 'gold', ~Gold~, 'black', ~Black~, 'silver', ~Silver~, ~Mysterious Stranger~)",
	tile_name: "def(tile) switch(tile.type, 'civ-tile_mine', ~mine~, 'civ-tile_farm', ~farm~, 'civ-tile_settle', ~settlement~, 'civ-tile_war', ~warrior camp~, ~claim~)",

	#returns the pixel size of the board
	#
	board_size: "def() consts.tile_size*consts.tiles",

	#returns the pixels of the board coordinate passed in.
	#
	tile_at: "def (coord) [x+consts.tile_size+x_in*consts.tile_size*2,y+consts.tile_size+y_in*consts.tile_size*2] where x_in = coord[0] where y_in = coord[1]",

	#returns the tile number at level coord if available
	#
	on_tile: "def(coords) 
			if(not loc in map(vars.play, 'vp', vp.vars.gridloc), loc) where loc = on_any_tile(coords)",

	#returns tile number at level coord
	on_any_tile: "def(coords) 
			if(mx > x and mx < x+board_size()*2 and my > y and my < y+board_size()*2,
				[tx, ty])
			where tx = (mx-x)/(consts.tile_size*2)
			where ty = (my-y)/(consts.tile_size*2)
			where mx = coords[0] where my = coords[1]",

	#returns the played tile at the level coord
	on_piece: "def(coords) find(vars.play, 'vp', vp.vars.gridloc = on_any_tile(coords))",

	#Returns the tile the mouse is on.
	#
	mouse_on_tile: "def() on_any_tile(level.player.vars.mouse.pos)",

	#Takes player (0) and a spot in the hand to deal to.
	#
	dealt_hand_loc: "def(player, spot) if(player = 0,
		[x - consts.tile_size + margin + step * spot, y + board_size()*2 + space_beneath]
		where step = ((board_size() - margin) * 2) / (vars.hand_size - 1)
		where margin = 125
		where space_beneath = 20
		)",

	#Takes x,y board coordinate, returns terrain name there.
	#
	get_terrain: "def(coords) switch(vars.land[coords[0] + coords[1]*consts.tiles], 0, 'ocean_grid', 1, 'plains_grid', 2, 'hill_grid', 3, 'ore_grid', 'ocean_grid')",

	#Can coords tile have food for obj?
	#
	has_food: "def(obj, coords) 
			has_food_with(obj, coords, [-1,-1])",

	#list of vectors for adjacent tiles
	#
	adjacents: "[[-1,0],[0,-1],[1,0],[0,1]]",

	#returns objects in play adjacent to coords
	#
	adjacent_objs: "def(coords) filter(map(adjacents, 'adjv', find(vars.play, 'tile', tile.vars.gridloc = [coords[0]+adjv[0], coords[1]+adjv[1]])), 'list', list != null)",

	#same as has_food, but without taking to account tile at less.
	#
	has_food_with: "def(obj, coords, less) 
			if(1 in map(adjacents, 'offset', 
				if(get_terrain([coords[0]+offset[0],coords[1]+offset[1]]) = 'plains_grid'
				and find(vars.play, 't', t.midpoint_x = tile_at([coords[0]+offset[0], coords[1]+offset[1]])[0] 
				and t.midpoint_y = tile_at([coords[0]+offset[0], coords[1]+offset[1]])[1]) = null,
					if([coords[0]+offset[0],coords[1]+offset[1]] = less, 0, 1), 
					0)
				)
			or (get_terrain([coords[0], coords[1]]) = 'plains_grid' and cache[consts.tile_types_side[obj.animation]] = 1),
				1,
				0)
			or obj.search_adjacent_connected_to_farm(tile_at(coords)[0], tile_at(coords)[1], obj.animation)
		#	or 'civ-tile_farm' in map(k_group(tile_at(coords), obj.animation), 'k_tile', k_tile.type)
		#",

	#Well, bother. This bit doesn't work here - a corner case(specifically, the lower right one) is broken.
	#returns a list of the tiles which will starve if coord is filled with obj. needs work. adjs is the tiles adjacent to coords.
	#
	starve: "def(obj, coords) filter(adjacent_objs(coords), 'adjs', not has_food_with(obj, adjs.vars.gridloc, coords))",

	#Is coords tile a valid spot to add obj?
	#
	is_valid_addition: "def(obj, coords) 
			switch(obj.type,
			'civ-tile_farm',	if(get_terrain(coords) = 'plains_grid' and (not played(coords))
								and (not went_to_war),
									1, 0),
			'civ-tile_mine',	if(get_terrain(coords) in ['hill_grid', 'ore_grid'] 
								and (not went_to_war)
								and has_food(obj, coords) and (not played(coords))
								and ((not find(starve(obj, coords), 'dead', dead.animation = obj.animation))
									or obj.search_adjacent_connected_to_farm(tile_at(coords)[0], tile_at(coords)[1], obj.animation)), 
									1, 0),
			'civ-tile_settle',	if(get_terrain(coords) and (not get_terrain(coords) in ['ocean_grid', 'ore_grid'])
								and (not went_to_war)
								and has_food(obj, coords) 
								and (not played(coords)) 
								and ((not find(starve(obj, coords), 'dead', dead.animation = obj.animation)) 
									or obj.search_adjacent_connected_to_farm(tile_at(coords)[0], tile_at(coords)[1], obj.animation)), 
									1, 0),
			'civ-tile_war',		if(get_terrain(coords) and (not get_terrain(coords) in ['ocean_grid', 'ore_grid']) and has_food(obj, coords)
								and ((not went_to_war) or played(coords))
								and (not find(vars.play, 'tile', tile.gridloc = coords and tile.animation = context.consts.tile_types[turn])) 
								and ((not find(starve(obj, coords), 'dead', dead.animation = obj.animation)) 
									or obj.search_adjacent_connected_to_farm(tile_at(coords)[0], tile_at(coords)[1], obj.animation)), 
									1, 0),
			0)",

	#Returns the tile which was played at coords.
	#
	played: "def(coords) find(vars.play, 'tile', tile.gridloc = coords)",

	#Darkens invalid positions for obj to be placed at.
	#
	draw_blackout: "def(tile) map(range(consts.tiles), 'cX', map(range(consts.tiles), 'cY', 
			if(not is_valid_addition(tile,[cX, cY]) and 'human' = vars.players[vars.turn], 
				if(not	my_valid_bldg_at(tile_at(list_subtract([cX,cY],[0,0])), tile, my_bldg_spots) or
						my_valid_bldg_at(tile_at(list_subtract([cX,cY],[1,0])), tile, my_bldg_spots) or
						my_valid_bldg_at(tile_at(list_subtract([cX,cY],[0,1])), tile, my_bldg_spots) or
						my_valid_bldg_at(tile_at(list_subtract([cX,cY],[1,1])), tile, my_bldg_spots), 
					spawn('civ_board.no', tile_at([cX,cY])[0], tile_at([cX, cY])[1], facing),
					if(my_valid_bldg_at(tile_at(list_subtract([cX,cY],[0,0])), tile, my_bldg_spots),
						[add_object(blackout),
						set(blackout.animation, 'big'), 
						] where blackout = object('civ_board.no', tile_at([cX,cY])[0], tile_at([cX, cY])[1], facing)
						)
					)
				)
			))",

	#Removes all blacked out tiles.
	#
	clear_blackout: "map(level.chars, 'obj', if(obj.type = 'civ_board.no', fire_event(obj, 'nix')))",
	mouse: "level.player.vars.mouse.pos",
	war_defeat_tile: "def(tile) schedule(2, [
			set(vars.play, filter(vars.play, 'vp', vp != tile)),
			fire_event(tile, 'nix'),
			[add_object(war_obj), 
			set(war_obj.midpoint_x, tile.midpoint_x), 
			set(war_obj.midpoint_y, tile.midpoint_y)
			] where war_obj = object('civ_war', x, y, facing), 
			])",

	#Uncached kingdom group functions. k_group returns the /side/ kingdom near /level coords/.
	k_group: "def(coords, side) _k_grow(on_any_tile(coords), filter(vars.play, 'vp', vp.animation=side), [])",
	_k_grow: "def(gridLocation, potential_tiles, approved_tiles) 
			if(touching, 
				_k_grow(touching[0].gridloc, filter(new_potential, 'np', not np in grew), new_approved + grew)
					where grew = _k_grow(gridLocation, filter(new_potential, 'np', np != touching[0]), []),
				new_approved
			)where new_potential = filter(potential_tiles, 'pt', pt.gridloc != gridLocation)
			where new_approved = approved_tiles + filter(potential_tiles, 'pt', pt.gridloc = gridLocation)
			where touching = _k_touching(gridLocation, potential_tiles)",
	_k_touching: "def(coords, potential_tiles)
			filter(
				map(adjacents, 'adjv', 
					find(potential_tiles, 'tile', 
						tile.vars.gridloc = [coords[0]+adjv[0], coords[1]+adjv[1]])), 
				'list', list != null)",

	#returns true if coords is adjacent to a 
	is_adjacent_to_side: "def(coord, side)
			1 in map(adjacents, 'adj', 
				if(
					filter(vars.play, 'vp',
						vp.gridloc = list_add(coord, adj)
						and context.consts.tile_types_side[vp.animation] = side
						),
					1,0
					)
				)",

	#set the help text to string
	#
	help: "def(string) vars.help_obj.set_text(string)",

	#Add a tile at board coordinates to the game data. Doesn't create tile.
	#
	add_tile: "def(tile, coords) [
			set(tile.vars.gridloc, coords),
			set(tile.midpoint_x, tile_at(coords)[0]), 
			set(tile.midpoint_y, tile_at(coords)[1]), 
			set(vars.play, vars.play + [tile]),]",

	#Like above, but creates the tile too.
	#
	place_tile: "def(tile, coords, team) [
			add_object(tile),
			set(tile.animation, consts.tile_types[team]),
			add_tile(tile, coords)
			]",

	#input is a list of place tile signatures, eg, [[tileA,[1,1],0], [tileB,[1,2],1]]
	#
	place_tiles: "def(inputs) [
			map(inputs, 'input', place_tile(input[0], input[1], input[2])),
			set(vars.play, vars.play + map(inputs, 'input', input[0])),
			]",

	#the list of current player's potential buildings
	my_bldg_spots: "bldg_spots[turn]",

	#returns the quad (a list of four buildings) which could support the current tile as an addition.
	my_valid_bldg: "def(tile, list_of_quads) 
			my_valid_bldg_at([tile.midpoint_x, tile.midpoint_y], tile, list_of_quads)",
	my_valid_bldg_at: "def(coords, tile, list_of_quads) 
			find(list_of_quads, 'quad', 
				quad[0].gridloc = on_any_tile([coords[0]-consts.tile_size, coords[1]-consts.tile_size])
				and bldg_codes[tile.type]
				and 1 in map(range(size(bldg_codes[tile.type])), 'index', 
					pair_off(
						map(quad, 'l2', l2.type), 
						map(bldg_codes[tile.type][index][0], 'l1', l1.type)
						)
					)
				)",

	#matches pairs elements in the two lists passed in and returns true if it can pair off all elements in at least one list.. It accepts the string 'wild' as a wildcard, but will not attempt to optimise this card's use in any way. To make the wildcard the last resort, put it at the end of the list. Wild cards only accepted in second list.
	#
	pair_off: "def(list1, list2) #current bug: pair_off([1,1,'wild','wild'], [5,4,5,1]) matches and shouldn't. Vica-versa is fine.#
			if(size(list1)=0 and size(list2)=0,
				1, 
				if((not (size(list1)=0 or size(list2)=0)) and pair,
					#I think the below filter is off.#
					pair_off(list1[1:size(list1)#add +1 here to break#], list2[0:index_to_nix] + list2[index_to_nix+1:size(list2)] where index_to_nix = find(map(range(size(list2)), 'index', if(list2[index] = list1[0] or list2[index] = 'wild' or list1[0] = 'wild', index, -1)), 'num', num >= 0)),
					0
					) where pair = list1[0] in list2 or 'wild' in (list2 + list1)
				)",

	#'draw' is a tile object, such as civ-tile_settle, to be evaluated for placement on the board. Map returns a 2D list of boolean values for placement, while the list version returns a 1D list of point coordinates for placement.
	#
	tile_placement_map: "def(draw) map(range(consts.tiles), 'tY', map(range(consts.tiles), 'tX', is_valid_addition(draw, [tX,tY])))",
	tile_placement_list: "def(draw) filter(flatten(map(range(consts.tiles),'pY', map(range(consts.tiles),'pX',
					if(tpm[pY][pX],	#This gets the x,y locations of all the 'true' occurences in putMap.#
						[pX,pY])))),						#While this could be done in one function, exposing the map allows for much easier debugging.#
				'coords', coords)
			where tpm = tile_placement_map(draw)",
},
vars: {
	players: ["human","ai_die","simple_ai"],

	#types are: 'human', 'ai_die', 'simple_ai', 'bunker'
	land: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,3,0,1,1,0,0,0,0,0,0,0,0,0,2,2,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,2,2,0,0,0,0,0,1,1,0,0,0,0,0,0,2,0,0,0,0,0,0,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2,1,1,0,0,0,0,0,0,1,1,1,1,2,2,2,1,1,0,0,0,0,0,1,1,1,2,3,2,2,1,1,1,0,0,0,0,0,1,2,2,2,2,2,0,0,0,0,0,0,1,1,1,1,2,2,3,2,2,0,0,0,0,0,0,1,1,0,0,2,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],

	#land: See is_valid_addition for types.
	#
	next_level: "undefined.cfg",

	#
	ore_to_win: 1,

	#
	ai_targets: [[],[],[],[]],

	# contains a list of each side's target board coordinates
	round: 0,

	# number of rounds played (One round counts as all players having played.)
	hand: [],

	# tiles in hand
	play: [],

	# tiles in play
	cache_version: 0,

	# version of the cache that tiles have
	turn: 0,

	# current side's turn
	hand_size: 6,

	# number of tiles in hand 
	camera_pos: [0,0,0,0],

	# initial location of the camera in the level
	help_text_pos: [50,575],

	# the location of the help text controller
	recruited: [],

	# warriors which have been selected to go to battle, but have not done so yet?
	camped: [],

	# encamped warriors, to be unencamped next turn
	not_refilled_when_played: [],

	# list of tiles in hand which can be refilled
	max_tiles_to_replace: 6,

	# 
	bldg_spots: [[],[],[],[]],

	# a list of tile quads available for bulding superstructures on
	bldg_codes: {
"civ-tile_settle": [
    [
      [
        "civ-tile_farm",
        "civ-tile_farm",
        "civ-tile_farm",
        "civ-tile_farm"
      ],
      "cache"
    ],
    [
      [
        "civ-tile_farm",
        "civ-tile_farm",
        "civ-tile_settle",
        "civ-tile_settle"
      ],
      "farm_house"
    ],
    [
      [
        "civ-tile_farm",
        "civ-tile_farm",
        "civ-tile_mine",
        "civ-tile_mine"
      ],
      "pottery"
    ],
    [
      [
        "civ-tile_farm",
        "civ-tile_farm",
        "civ-tile_war",
        "civ-tile_war"
      ],
      "milita"
    ],
    [
      [
        "civ-tile_settle",
        "civ-tile_settle",
        "civ-tile_settle",
        "civ-tile_settle"
      ],
      "great_hall"
    ],
    [
      [
        "civ-tile_settle",
        "civ-tile_settle",
        "civ-tile_mine",
        "civ-tile_mine"
      ],
      "quarry"
    ],
    [
      [
        "civ-tile_settle",
        "civ-tile_settle",
        "civ-tile_war",
        "civ-tile_war"
      ],
      "embassy"
    ],
    [
      [
        "civ-tile_mine",
        "civ-tile_mine",
        "civ-tile_mine",
        "civ-tile_mine"
      ],
      "furnace"
    ],
    [
      [
        "civ-tile_mine",
        "civ-tile_mine",
        "civ-tile_war",
        "civ-tile_war"
      ],
      "shop"
    ],
    [
      [
        "civ-tile_war",
        "civ-tile_war",
        "civ-tile_war",
        "civ-tile_war"
      ],
      "barracks"
    ]
  ]
},
	cache: [0,0,0,0],

	# the status of the bonus buildings, for each team
	farm_house: [0,0,0,0],
	pottery: [0,0,0,0],
	militia: [0,0,0,0],
	great_hall: [0,0,0,0],
	quarry: [0,0,0,0],
	quarry_bldg: [0,0,0,0],
	embassy: [0,0,0,0],
	furnace: [0,0,0,0],
	barracks: [0,0,0,0],
	ai_counter: 0,
},
consts: {
	tiles: 14,

	# number of tiles on board 
	#
	tile_size: 16,

	# size of tile image 
	#
	tile_types: ["normal","gold","black","silver"],
	tile_types_side: {
"black": 2,
"gold": 1,
"normal": 0,
"silver": 3
},
},
on_create: "[
		set(draw_area, [0, 0, board_size(), board_size()]),
		set(vars.camera_pos, level.camera_position),
		[set(new_bag.vars.spawner, self),
		add_object(new_bag),
		set(vars.bag, new_bag),
		]where new_bag = object('civ-tile_bag', x + board_size()*2 + right_column_offset, y+((board_size()*5)/3), facing),
		
		if(size(vars.land) = consts.tiles*consts.tiles,
			map(range(size(vars.land)), 'land_index', spawn(self.type + '.' + ltype, lcoord[0], lcoord[1], facing) where lcoord = tile_at([land_index%consts.tiles, land_index/consts.tiles]) where ltype = switch(vars.land[land_index], 0, 'ocean_grid', 1, 'plain_grid', 2, 'hill_grid', 3, 'ore_grid', 'ocean_grid')),
			debug(size(vars.land), ' does not equal ', consts.tiles*consts.tiles, ', failed creating map tiles from land data.')),
			
		spawn('civ_logo', x + board_size()*2 + right_column_offset, y+((board_size()*2)/4), facing),
		
		if(vars.players[0] != 'human' ,[set(vars.turn, -1), schedule(2, fire_event('end_turn'))]),
		
		schedule(3, fire_event('find_buttons')),
		
		[set(vars.help_obj, hobj),
		hobj.set_text('Drag a tile to the board to play. Right-click for help.'),
		add_object(hobj),
		] where hobj = object('text_controller',help_text_pos[0],help_text_pos[1],0),
		
		schedule(2, [
			fire_event('recalculate_end_turn_button_state'),
			fire_event('tiles_in_play_modified'),
			]),
			
		[set(vars.turn_indicator, blankTile),
		add_object(blankTile),
		spawn('text_controller', blankTile.midpoint_x+41, blankTile.midpoint_y+8, 0, [set(txt, ~'s Turn~)]),
		] where blankTile = object('civ-tile_blank', x + board_size()*2 + right_column_offset - 40, y+(board_size()), facing),
		
		set(level.player.vars.board, self),
		] where right_column_offset = 125
		where camera = get_object(level, 'logic')",
on_find_buttons: "[set(vars.turn_button, bag.turn_button), set(vars.fight_button, get_object(level, 'fight')), set(get_object(level, 'fight').board, self)]",
on_replace: "if(size(not_refilled_when_played) < max_tiles_to_replace, [
			set(vars.replace, 1),
			help(~Select up to {str(num_to_replace)} {if(num_to_replace = 1, 'tile', 'tiles')} to replace, then press the end turn button.~) where num_to_replace = max_tiles_to_replace - size(not_refilled_when_played),
			set(vars.trigger_replace, 1),
		],[
			map(range(max_tiles_to_replace-1), 'tilenum', 
				schedule(tilenum*5, [
					set(vars.bag.vars.on_deal_tile, not_refilled_when_played[tilenum].vars.hand_pos),
					fire_event(vars.bag, 'deal_p1')])),
			add(bag.turn_button.x, 300),
			schedule(max_tiles_to_replace*5+5, [fire_event('end_turn'), add(bag.turn_button.x, -300)]),
			set(not_refilled_when_played, not_refilled_when_played[max_tiles_to_replace: size(not_refilled_when_played)]),
			help(~Drew additional {str(max_tiles_to_replace)} tile{if(max_tiles_to_replace != 1, 's', '')} to hand to replace warriors.~),
			]
		)",
on_deal_replace: "[
		set(vars.freeze, 1),
		help(~Replaced {size(toReplace)} tile{if(size(toReplace) != 1, 's', '')}{if(size(not_refilled_when_played) = 0, '.', ', and replaced warriors.')}~),
		set(vars.hand, filter(vars.hand, 'vh', not vh in allReplace)),
		map(range(size(allReplace)), 'ind', schedule(2+size(allReplace)*5+35+ind*4, [
			set(vars.bag.vars.on_deal_tile, allReplace[ind].vars.hand_pos),
			fire_event(vars.bag, 'deal_p1'),
			])),
			
		map(allReplace, 'ar', [set(ar.red, 256), set(ar.blue, 256)]),
		
		if(not shop, 
			schedule(2+size(allReplace)*5+35+size(allReplace)*4+20, [
				fire_event('end_turn'),
				add(bag.turn_button.x, -300),
				]),
			[set(shop, 0),
			add(bag.turn_button.x, -300),
			set(vars.replace, 0),
			set(max_tiles_to_replace, 6),
			fire_event('recalculate_end_turn_button_state'),
			]),
			
		set(not_refilled_when_played, []),
		set(toReplace, []),
		set(vars.bag.vars.piles, list_replace_elements(vars.bag.vars.piles, turn, [vars.bag.vars.piles[turn] + toReplace])), 
		
		map(range(size(toReplace)), 'torp', schedule((torp+2)*2, [
			schedule(frames, remove_object(toReplace[torp])),
			toReplace[torp].go_to_over([replaceTo.x,replaceTo.y], frames),
		] where frames = 25)),
		] where allReplace = not_refilled_when_played + vars.toReplace
		where replaceTo = bag.spawn_point",
on_refresh_warrior_selected_text: "get_object(level, 'strength').set_text(~Armies:~ + '\n' + str(strengths[0]+defending_barracks_bonus) + ~(+?) VS ~ + str(strengths[1]+attacking_barracks_bonus) + ~(+~ + str(size(recruited)) + ~)~)",
on_rmb_down: "[help(~Try the board or the tiles. Sorry. :(~),
		#debug(mouse_on_tile()),#
		if(mouse_on_tile(),
			help(
				switch(get_terrain(mouse_on_tile()),
				'ocean_grid', ~This is an ocean space. Nothing can be built here.~, 
				'plains_grid', ~This rich plain is capable of supporting a farm or a nearby tile.~, 
				'hill_grid', ~The mountains are barren, windswept, and not much use.~, 
				'ore_grid', ~Valuable minerals! Build a mine here to control this resource.~)
				)
			),
		map(vars.hand + vars.play, 'tile', if(help_txt, help(help_txt)) where help_txt = tile.help(level.player.vars.mouse)),
		]",
on_lmb_down: "if('human' = vars.players[vars.turn] and (not freeze), [
		fire_event(vars.turn_button, 'lmb_hold', level.player.vars.mouse),
		fire_event(vars.fight_button, 'lmb_hold', level.player.vars.mouse),
		if(not war, [
			if(not replace, [
				map(vars.hand, 'tile', fire_event(tile, 'lmb_down', level.player.vars.mouse)),
				],
				map(vars.hand, 'tile', fire_event(tile, 'replace_select', level.player.vars.mouse)),
			)],
			map(vars.hand, 'tile', fire_event(tile, 'war_select', level.player.vars.mouse)),
		)])",
on_lmb_hold: "if(not war or replace, [
		#debug('tile:', mouse_on_tile())#
		if(ot,
			[set(tmp.old_ot, ot),
			if(tmp.old_ot != ot,
				[set(tmp.tile_highlight, hlt),
				add_object(hlt),
				remove_object(tmp.tile_highlight),
				] where hlt = object('civ_board.tile', tile_at(ot)[0], tile_at(ot)[1], facing),
				),
				#object('civ_board.tile', tile_at(ot)[0]-consts.tiles, tile_at(ot)[1]-consts.tiles, facing)#
			],
			[set(tmp.old_ot, 0),
			remove_object(tmp.tile_highlight),
			])
		where ot = mouse_on_tile(),
		
		fire_event(vars.turn_button, 'lmb_hold', level.player.vars.mouse),
		fire_event(vars.fight_button, 'lmb_hold', level.player.vars.mouse),
		])",
on_lmb_up: "[
		remove_object(tmp.tile_highlight),
		fire_event(vars.turn_button, 'lmb_up', level.player.vars.mouse),
		fire_event(vars.fight_button, 'lmb_up', level.player.vars.mouse),
		]",
on_release_tile: "if(mouse_on_tile() and vars.players[vars.turn] = 'human',
			[set(arg.midpoint_x, tile_at(mouse_on_tile())[0]),
			set(arg.midpoint_y, tile_at(mouse_on_tile())[1]),
			#debug(my_valid_bldg(arg, my_bldg_spots)),#
			fire_event('release_tile_internal', arg)],
			fire_event('fail_release_tile', arg))",
on_release_tile_internal: "if(not vars.war or vars.replace,
	    [#debug(tile_at(mouse_on_tile())),#
		if(mot and is_valid_addition(arg, mouse_on_tile()) and (not arg.type = 'civ-tile_war' and (played(mouse_on_tile()))), #add a tile normally#
			[set(arg.vars.gridloc, mot),
			set(arg.midpoint_x, tile_at(mot)[0]), 
			set(arg.midpoint_y, tile_at(mot)[1]), 
			set(vars.play, vars.play + [arg]), #Setting arg.midpoint_s before this function avoids a [] crash.#
			set(vars.bag.vars.on_deal_tile, arg.vars.hand_pos),
			set(arg.animation, consts.tile_types[vars.turn]),
			set(vars.hand, filter(vars.hand, 'vh', vh != arg)),
			if(arg.type = 'civ-tile_mine' and get_terrain(mot) = 'ore_grid', fire_event('ore_mine')),
			if(not arg.type = 'civ-tile_mine' and furnace[turn] = 1, [
				fire_event(vars.bag, 'deal_p1'),
				if(size(vars.bag.vars.piles[vars.turn]) < 6, debug('Game Over'), fire_event('check_cache_bonus')),
				],[
				set(not_refilled_when_played, not_refilled_when_played + [arg]),
				]),
			],
			fire_event('fail_release_tile', arg))
			where mot = mouse_on_tile(),
		])",
on_fail_release_tile: "if(quad, schedule(2,
			[fire_event(find(vars.bldg_codes[arg.type], 'blueprints', pair_off(map(quad, 'q', q.type), blueprints[0]))[1], arg),
			schedule(2, set(arg.zorder, arg.zorder-9)),
			set(arg.midpoint_x, quad[3].x),
			set(arg.midpoint_y, quad[3].y),
			set(vars.bag.vars.on_deal_tile, arg.vars.hand_pos),
			fire_event(vars.bag, 'deal_p1'),
			map(quad, 'quad_tile', set(quad_tile.bldg_status, arg)),
			]),
			if((not on_piece(mouse).animation != arg.animation) or arg.type != 'civ-tile_war' or (not on_any_tile(mouse)), 
				fire_event('rehand_tile', arg),
				if(is_valid_addition(arg, mouse_on_tile()), #WAR!#
					[#set(arg.midpoint_x, mouse[0]),
					set(arg.midpoint_y, mouse[1]),#
					
					fire_event('war', arg),
					#war_defeat_tile(on_piece(mouse)),#
					fire_event('release_tile_internal', arg),
					
					], 
					fire_event('rehand_tile', arg),)
				)
			) where quad = my_valid_bldg_at(mouse, arg, my_bldg_spots)",
on_recalculate_end_turn_button_state: "if(not went_to_war,
			bag.turn_button.set_state('replace'),
			bag.turn_button.set_state('normal'),
		)",
on_war: "[ #set up the war#
		set(vars.war, 1),
		set(vars.help_obj.x, vars.help_obj.x - 220),
		set(vars.hand, filter(vars.hand, 'vh', vh != arg)),
		help('Select additional warrior tiles from hand for one-time use.'),
		set(level.lock_screen, [vars.camera_pos[0]+vars.camera_pos[2]/2-220,vars.camera_pos[1]+vars.camera_pos[3]/2]),
		set(arg.zorder, arg.zorder + 1), #doesn't work#
		fire_event('make_blink', on_piece(mouse)),
		schedule(20, fire_event('make_blink', arg)),
		get_object(level, 'vs').set_text(tile_side_name(on_piece(mouse)) + ~ VS ~ + tile_side_name(arg.animation)),
		[	get_object(level, 'strength').set_text(~Armies:~ + '\n' + str(strengths[0]+dbar) + ~(+?) VS ~ + str(strengths[1]+abar) + ~(+0)~),
			set(attacking_barracks_bonus, abar),
			set(defending_barracks_bonus, dbar),
		] where dbar = barracks[consts.tile_types_side[on_piece(mouse).animation]]*4
		where abar = barracks[consts.tile_types_side[arg.animation]]*4,
		set(vars.strengths, strengths),
		set(vars.war_arg, arg), set(vars.war_on, on_piece(mouse)),
		] where strengths = [size(filter(k_group(mouse, on_piece(mouse).animation), 'tile', tile.type = 'civ-tile_war')), size(filter(k_group(mouse, arg.animation), 'tile', tile.type = 'civ-tile_war'))+1]",
on_fight: "map(range(size(actions)), 'index', schedule(index * 10, actions[index]))
		where actions = if(size(recruited) > 0, map(range(size(recruited)), 'rind', [
			map(range(res), 'delay', schedule(delay, [
				set(recruited[rind].x, (recruited[rind].x*(res-delay) + war_arg.x*delay)/res),
				set(recruited[rind].y, (recruited[rind].y*(res-delay) + war_arg.y*delay)/res)])) where res = 20,
			schedule(21, fire_event(recruited[rind], 'nix'))
			]))
		+ [schedule(if(size(recruited) > 0, 15, 0), [ #finish the fight#
		set(vars.war, 0),
		set(vars.went_to_war, 1),
		set(vars.help_obj.x, vars.help_obj.x + 220),
		set(level.lock_screen, [vars.camera_pos[0]+vars.camera_pos[2]/2,vars.camera_pos[1]+vars.camera_pos[3]/2]),
		set(vars.war_arg.zorder, arg.zorder - 1),
		schedule(60*farm_house[turn], if(strengths[0] + AIStrength + defBarracks >= strengths[1] + size(recruited) + attBarracks,
			[war_defeat_tile(vars.war_arg),
			help(tile_side_name(vars.war_arg) + ~'s warriors have fled! (~ + str(strengths[0]+AIStrength+ defBarracks) + ~ to ~ + str(strengths[1]+size(recruited) + attBarracks) + ~)~),
			],
			[war_defeat_tile(vars.war_on), 
			add_tile(vars.war_arg, on_any_tile([vars.war_arg.midpoint_x,vars.war_arg.midpoint_y])),
			set(vars.camped, vars.camped + [vars.war_arg]),
			help(~A ~ + tile_side_name(vars.war_on) + ' ' + tile_name(vars.war_on) + ~ was destroyed by ~ + tile_side_name(vars.war_arg) + ~'s warriors! (~ + str(strengths[0]+AIStrength+defBarracks) + ~ to ~ + str(strengths[1]+size(recruited)+attBarracks) + ~)~),
			schedule(3, set(vars.play, filter(vars.play, 'vp', vp != context.vars.war_on) + [vars.war_arg])),
			])) where defBarracks = defending_barracks_bonus
			where attBarracks = attacking_barracks_bonus
			where AIStrength = 0,
		#schedule(2, [
			set(vars.bag.vars.on_deal_tile, vars.war_arg.vars.hand_pos),
			fire_event(vars.bag, 'deal_p1'),
		]),#
		set(recruited, []),
		set(not_refilled_when_played, not_refilled_when_played + recruited + [vars.war_arg]),
		#debug(recruited),#
		#schedule(30, 
			if(size(vars.bag.vars.piles[vars.turn]) = 1, 
				debug('Game over, no more tiles.'), 
				fire_event('check_cache_bonus')
			)
		),#
		schedule(15, fire_event('recalculate_end_turn_button_state')),
		])]",
on_make_blink: "[set(arg.alpha, 0), schedule(20, [set(arg.alpha, 256), schedule(20, if(vars.war, fire_event('make_blink', arg)))])]",
on_rehand_tile: "arg.go_to(dealt_hand_loc(0,arg.vars.hand_pos))",
on_tiles_in_play_modified: "[add(vars.cache_version, 1),
		map(vars.play, 'p', [
			fire_event(p, 'calculate_surroundings'), 
			fire_event(p, 'calculate_kingdom', context)
			]),
		set(vars.bldg_spots,  map(consts.tile_types, 'ttype', #for each side, a list of quads of tiles available for building on#
			#'\n' + size(sideTiles) + 'x side ' + ttype#
			filter(map(sideTiles, 'sideTile', 
				if(not null in tileQuad, tileQuad)
				where tileQuad = [
					sideTile,
					find(sideTiles, 'st', st.gridloc = list_add(sideTile.gridloc,[1,0])),
					find(sideTiles, 'st', st.gridloc = list_add(sideTile.gridloc,[0,1])),
					find(sideTiles, 'st', st.gridloc = list_add(sideTile.gridloc,[1,1]))
					]
				), 'quads', quads != null)
			where sideTiles = filter(vars.play, 'inPlay', inPlay.animation = ttype and (not inPlay.bldg_status))
			)),
		#debug(bldg_spots),#
		]",
on_end_turn: "if(vars.trigger_replace = 1, [
		fire_event('deal_replace'), 
		set(vars.trigger_replace, 0),
		add(bag.turn_button.x, 300),
		],[
		[map(to_decamp, 'camp', [fire_event(camp, 'nix')]),
		set(vars.play, filter(vars.play, 'in_play', not in_play in context.to_decamp)),
		set(vars.camp, filter(vars.camp, 'a_camp', not a_camp in context.to_decamp)),
		] where to_decamp = filter(vars.camped, 'camp', camp.animation = context.consts.tile_types[nt]),
		schedule(2, fire_event('tiles_in_play_modified')), #update the cache#
		schedule(2, fire_event('tiles_in_play_modified')), #for some reason, calling this twice to prevents erronious starves when two 'kingdoms' joined#
		schedule(3, fire_event('end_turn_compute_starves')),
	]) where nt = (vars.turn+1)%size(vars.players)",
on_end_turn_compute_starves: "[
		#if(turn=0, help(' ')),# #timing issues regarding bonus building text#
		schedule(1, fire_event('recalculate_end_turn_button_state')),
		set(ai_counter, 0),
		set(vars.replace, 0),
		set(vars.went_to_war, 0),
		set(max_tiles_to_replace, 6),
		[schedule(15, [
		switch(vars.players[nt],
			'human', [],
			[fire_event(vars.players[nt] + '_turn')]
			),
		#debug(str(tile.animation) + ' ' + str(tile.type) + ' at ' + str(tile.vars.gridloc)) where tile = vars.play[size(vars.play)-1],#
		]),
		set(vars.turn, nt),
		if(nt != vars.turn+1, add(vars.round, 1)),
		set(turn_indicator.animation, consts.tile_types[nt]),
		] where nt = (vars.turn+1)%size(vars.players),
		map(vars.play, 'tile', 
			if(not (has_food(tile, tile.vars.gridloc) or tile.type = 'civ-tile_farm'), 
				if(pottery[consts.tile_types_side[tile.animation]] = 0 or (tile.noPots=1 and consts.tile_types_side[tile.animation] = turn), 
					if(not size(defect) > 0, [
						fire_event('hack_remove_play_obj', tile),
						fire_event(tile, 'nix'), 
						add_starve_object,
						],[
						set(tile.animation, defect[(1d(size(defect)))-1]),
						add_starve_object,
						]
					) where defect = filter(map(adjacent_objs(tile.gridloc), 'adjs', adjs.animation), 'aa', aa != tile.animation and embassy[consts.tile_types_side[aa]] = 1)
					where add_starve_object = 
						[add_object(starve_obj), 
						set(starve_obj.midpoint_x, tile.midpoint_x), 
						set(starve_obj.midpoint_y, tile.midpoint_y)
						] where starve_obj = object('civ_starve', x, y, facing),
					[
					set(tile.noPots, 1),
					[add_object(starve_obj), 
					set(starve_obj.midpoint_x, tile.midpoint_x), 
					set(starve_obj.midpoint_y, tile.midpoint_y)
					] where starve_obj = object('civ_warning', x, y, facing), 
				]),
					set(tile.noPots, 0)
				)
			),
		#debug(farm_house),#
		set(vars.freeze, 0),
	]",
on_hack_remove_play_obj: "set(vars.play, filter(vars.play, 'in_play', in_play != arg))",

#Simple_AI - demonstrating the use of some common ai calls. (AI_die was written before
#these were produced, so it modifies raw data.) This AI is restricted to building
#adjacent to itself. (At least one tile must be placed via scenario FML to start this
#process.) You can set vars.ai_targets to a list of grid locations for this AI to
#try to build to.
on_simple_ai_turn: "[#debug(~Put map for {draw[0].type}:\n  {map(putMap, 'pt', pt + ['\n'])}Put list: {putList}.~),#
		if(size(putList) = 0,
			if(ai_counter > max_retries, 
				schedule(2, fire_event('end_turn')),
				[add(ai_counter, 1),
				schedule(2,  fire_event('simple_ai_turn'))]
			),[
			if(not played(spotToAdd), #War# 
				schedule(2, place_tile(draw[0], spotToAdd, turn)),
				if(att_strength <= def_strength, [
					help(~{tile_side_name(defender.animation)} repelled an attack from {tile_side_name(consts.tile_types[turn])}. ({def_strength} vs {att_strength})~),
					[add_object(war_obj), 
					set(war_obj.midpoint_x, tile_at(spotToAdd)[0]), 
					set(war_obj.midpoint_y, tile_at(spotToAdd)[1])
					] where war_obj = object('civ_war', x, y, facing)
					],[
					help(~{tile_side_name(defender.animation)}'s {tile_name(defender)} was overran by {tile_side_name(consts.tile_types[turn])}'s warriors, {def_strength} to {att_strength}.~),
					#debug(map(filter(k_group(tile_at(spotToAdd), defender.animation), 'kg', kg.type = 'civ-tile_war'), 'kg', '{kg.type} at {kg.gridloc}')),#
					#debug(size(k_group(tile_at(spotToAdd), defender.animation))),#
					remove_object(defender),
					schedule(4, set(vars.play, filter(vars.play, 'vp', vp != defender) + [draw[0]])),
					set(vars.camped, vars.camped + [draw[0]]),
					schedule(3, place_tile(draw[0], spotToAdd, turn)),
					]
					)where att_strength = size(filter(k_group(tile_at(spotToAdd), consts.tile_types[turn]), 'kg', kg.type = 'civ-tile_war')) + 1d3
					where def_strength = size(filter(k_group(tile_at(spotToAdd), defender.animation), 'kg', kg.type = 'civ-tile_war'))
					where defender = find(vars.play, 'vp', vp.gridloc = spotToAdd)
			),
			draw[1],	#This removes the drawn tile from the bag.#
			schedule(5, fire_event('end_turn'))
			] where spotToAdd = if(ai_counter < max_retries-3 and size(target) > 0 and size(putList) > 0,		#This is where you add strategy.#
				sort(putList, length(a[0], a[1], target[0][0], target[0][1]) < length(b[0], b[1], target[0][0], target[0][1]))[0],
				list_get_random(putList),
				) where target = filter(vars.ai_targets[turn], 'targets', not targets in map(context.vars.play, 'vp', vp.gridloc))
		)
		] where putList = filter(tile_placement_list(draw[0]), 'spot', is_adjacent_to_side(spot, turn))
		where putMap = tile_placement_map(draw[0])
		where draw = vars.bag.extract(vars.turn)
		where max_retries = 10",

#bunker: It will not expand, but it will attack when appropriate.
#
on_bunker_turn: "[
		if(size(putList) = 0,
			if(ai_counter > max_retries, 
				schedule(2, fire_event('end_turn')),
				[add(ai_counter, 1),
				schedule(2,  fire_event('bunker_turn'))]
			),[#debug(putList),#
			if(not played(spotToAdd), #War# 
				schedule(2, place_tile(draw, spotToAdd, turn)),
				if(att_strength <= def_strength, [
					help(~{tile_side_name(defender.animation)} repelled an attack from {tile_side_name(consts.tile_types[turn])}. ({def_strength} vs {att_strength})~),
					[add_object(war_obj), 
					set(war_obj.midpoint_x, tile_at(spotToAdd)[0]), 
					set(war_obj.midpoint_y, tile_at(spotToAdd)[1])
					] where war_obj = object('civ_war', x, y, facing)
					],[
					help(~{tile_side_name(defender.animation)}'s {tile_name(defender)} was overran by {tile_side_name(consts.tile_types[turn])}'s warriors, {def_strength} to {att_strength}.~),
					#debug(map(filter(k_group(tile_at(spotToAdd), defender.animation), 'kg', kg.type = 'civ-tile_war'), 'kg', '{kg.type} at {kg.gridloc}')),#
					#debug(size(k_group(tile_at(spotToAdd), defender.animation))),#
					remove_object(defender),
					schedule(4, set(vars.play, filter(vars.play, 'vp', vp != defender) + [draw])),
					set(vars.camped, vars.camped + [draw]),
					schedule(3, place_tile(draw, spotToAdd, turn)),
					]
					)where att_strength = size(filter(k_group(tile_at(spotToAdd), consts.tile_types[turn]), 'kg', kg.type = 'civ-tile_war')) + 1d3
					where def_strength = size(filter(k_group(tile_at(spotToAdd), defender.animation), 'kg', kg.type = 'civ-tile_war'))
					where defender = find(vars.play, 'vp', vp.gridloc = spotToAdd)
			),
			schedule(5, fire_event('end_turn'))
			] where spotToAdd = if(ai_counter < max_retries-3 and size(target) > 0 and size(putList) > 0,		#This is where you add strategy.#
				sort(putList, length(a[0], a[1], target[0][0], target[0][1]) < length(b[0], b[1], target[0][0], target[0][1]))[0],
				list_get_random(putList),
				) where target = filter(vars.ai_targets[turn], 'targets', not targets in map(context.vars.play, 'vp', vp.gridloc))
		)
		] where putList = filter(tile_placement_list(draw), 'spot', is_adjacent_to_side(spot, turn) and spot in map(context.vars.play, 'vp', vp.gridloc))
		where putMap = tile_placement_map(draw)
		where draw = object('civ-tile_war', bag_x, bag_y, facing)
		where max_retries = 0",

#depreciated:
#The logic for the Die AI. This sequence performs the actions every AI should do. Each
#AI must fire_event('end_turn') when it is done. (This is the 'next turn' button.)
#Tiles need to be placed manually (by setting an x, y), and each tile played needs
#to be added to vars.play. -excised bit about cache-
#A note, vars.bag.extract(vars.turn) returns a list containing the tile
#object (index 0), which we see, but it also returns a series of instructions (index 1)
#to remove the object from the tile bag. Make sure to run these instructions, or the
#bag will never empty.
#
on_ai_die_turn: "[
		if(size(validity2d) > 0, [
			set(tile_to_place[0].midpoint_x, tile_at(validity2d[eY][eX])[0]), #set tile pos to grid we chose#
			set(tile_to_place[0].midpoint_y, tile_at(validity2d[eY][eX])[1]),
			set(tile_to_place[0].animation, consts.tile_types[vars.turn]), #set the animation to the current side#
			set(tile_to_place[0].vars.gridloc, validity2d[eY][eX]), #set the grid location of the tile#
			set(vars.play, vars.play+[tile_to_place[0]]), #add the tile to the list of tiles in play#
			add_object(tile_to_place[0]),
			tile_to_place[1], #actually remove the object from it's bag#
			] where eX = (1d (size(validity2d[eY])))-1 #eX and eY are now valid locations coordinates.#
			where eY = (1d (size(validity2d)))-1,
			fire_event('ai_die_turn'),
			)
		where validity2d = filter(
			map(range(consts.tiles), 'cX', 
				filter(
					map(range(consts.tiles), 'cY', 
						if(is_valid_addition(tile,[cX, cY])
						and (not [cX, cY] in map(vars.play, 'tile', tile.vars.gridloc)
						and ((not find(starve(tile, [cX, cY]), 'dead', dead.animation = tile.animation))
						  or tile.search_adjacent_connected_to_farm(tile_at([cX, cY])[0], tile_at([cX, cY])[1], consts.tile_types[vars.turn])))
						and has_food(tile, [cX, cY]), 
							[cX,cY]
							)
						), 
					'add', add != null)
				),
			'add', add != [])
		where tile = tile_to_place[0],
		
		#debug('ended die`s turn'),# fire_event('end_turn'),
		] where tile_to_place = vars.bag.extract(vars.turn)",
on_check_cache_bonus: "[if(farm_house[turn] = 1, [
		set(max_tiles_to_replace, 1),
		schedule(2, fire_event('replace')),
		bag.turn_button.set_state('normal'),
		], [
		schedule(5, fire_event('end_turn'))
		])]",
on_check_ore: "[if(quarry[turn] >= ore_to_win, 
		schedule(30, teleport(next_level, 'camera', 'fade'))),
		help('Quarry: +1 ore towards victory. You have {quarry[turn]} {if(quarry[turn]=1, ~ore~, ~ores~)} of {ore_to_win}.')
		]",
on_ore_mine: "[set(quarry, list_replace_elements(quarry, turn, [quarry[turn]+1])),
		schedule(2, fire_event('check_ore')),
		]",
on_cache: "[set(cache, list_replace_elements(cache, turn, [1])),
		help('Cache: All friendly tiles on plains are fed.'),
		schedule(25, fire_event('end_turn'))]",
on_farm_house: "[set(farm_house, list_replace_elements(farm_house, turn, [1])),
		help('Farmhouse: Trade one tile each turn for free.'),
		schedule(25, fire_event('end_turn'))]",
on_pottery: "[set(pottery, list_replace_elements(pottery, turn, [1])),
		help('Pottery: Grants one turn of warning before a starves.'),
		schedule(25, fire_event('end_turn'))]",
on_milita: "[set(militia, list_replace_elements(militia, turn, [1])),
		help('Militia: Play farm tiles as warriors during battle.'),
		schedule(25, fire_event('end_turn'))]",
on_great_hall: "[set(great_hall, list_replace_elements(great_hall, turn, [great_hall[turn]+1])),
		if(vars.hand_size+great_hall[turn]*2 < 14, [
			[set(vars.bag.vars.on_deal_tile, -great_hall[turn]-1),
			fire_event(vars.bag, 'deal_p1'),],
			[set(vars.bag.vars.on_deal_tile, vars.hand_size-1+great_hall[turn]+1),
			fire_event(vars.bag, 'deal_p1'),],
			help('Great Hall: +2 tiles held in hand, up to 14 total.')
		],
			help('Great Hall: You can`t fit any more tiles in your hand.')
		),
		schedule(25, fire_event('end_turn'))]",
on_quarry: "[set(quarry_bldg, list_replace_elements(quarry_bldg, turn, [1])),
		if(quarry_bldg[turn], help('You built a deep quarry, but you already have one.'), fire_event('ore_mine')),
		schedule(25, fire_event('end_turn')),]",
on_embassy: "[set(embassy, list_replace_elements(embassy, turn, [1])),
		help('Embassy: Get an opponent`s starving tiles bordering your tiles.'),
		schedule(25, fire_event('end_turn'))]",
on_furnace: "[set(furnace, list_replace_elements(furnace, turn, [1])),
		help('Furnace: Building a mine does not end the turn.'),
		schedule(25, fire_event('end_turn'))]",
on_shop: "[set(shop, 1),
		set(max_tiles_to_replace, 14),
		schedule(2, bag.turn_button.set_state('normal')),
		fire_event('replace'),
		help('Shop: Immediately replace all tiles without ending the turn.')]",
on_barracks: "[set(barracks, list_replace_elements(barracks, turn, [1])),
		help('Having barracks grants +4 to army strength. (Does not stack.)'),
		schedule(25, fire_event('end_turn'))]",
on_end_anim: "animation('normal')",
editor_info: {
	category: "crazy-stuff",
},
animation: {
	id: "normal",
	image: "experimental/civ-tile.png",
	x: 0,
	y: 0,
	w: 16,
	h: 16,
	pad: -1,
	frames: 1,
	duration: 6541,
	surface_area: "all",
},
object_type: [
	{
		id: "tile",
		hitpoints: 2,
		zorder: -8,
		on_create: "[
			set(alpha, tint),
			] where tint = 75",
		animation: {
			id: "normal",
			image: "experimental/civ-stuff.png",
			x: 11,
			y: 10,
			w: 16,
			h: 16,
			pad: -1,
			frames: 1,
			duration: 5541,
			surface_area: "all",
		},
	},
	{
		id: "no",
		hitpoints: 2,
		zorder: 9,
		on_create: "[
			set(alpha, tint),
			] where tint = 75",
		on_nix: "die()",
		animation: [
			{
				id: "normal",
				image: "experimental/civ-stuff.png",
				x: 30,
				y: 10,
				w: 16,
				h: 16,
				pad: -1,
				frames: 1,
				duration: 6541,
				surface_area: "all",
			},
			{
				id: "big",
				image: "experimental/civ-stuff.png",
				x: 117,
				y: 418,
				w: 32,
				h: 32,
				pad: -1,
				frames: 1,
				duration: 6542,
				surface_area: "all",
			},
		],
	},
	{
		id: "ocean_grid",
		hitpoints: 2,
		zorder: -10,
		animation: {
			id: "normal",
			image: "experimental/civ-stuff.png",
			x: 14,
			y: 85,
			w: 16,
			h: 16,
			pad: -1,
			frames: 1,
			duration: 542,
			surface_area: "all",
		},
	},
	{
		id: "plain_grid",
		hitpoints: 2,
		zorder: -10,
		animation: {
			id: "normal",
			image: "experimental/civ-stuff.png",
			x: 14,
			y: 108,
			w: 16,
			h: 16,
			pad: -1,
			frames: 1,
			duration: 543,
			surface_area: "all",
		},
	},
	{
		id: "hill_grid",
		hitpoints: 2,
		zorder: -10,
		animation: {
			id: "normal",
			image: "experimental/civ-stuff.png",
			x: 14,
			y: 153,
			w: 16,
			h: 16,
			pad: -1,
			frames: 1,
			duration: 544,
			surface_area: "all",
		},
	},
	{
		id: "ore_grid",
		hitpoints: 2,
		zorder: -10,
		animation: [
			{
				id: "normal",
				image: "experimental/civ-stuff.png",
				x: 33,
				y: 153,
				w: 16,
				h: 16,
				pad: -1,
				frames: 1,
				duration: 999999999,
				surface_area: "all",
			},
			{
				id: "normal",
				image: "experimental/civ-stuff.png",
				x: 52,
				y: 153,
				w: 16,
				h: 16,
				pad: -1,
				frames: 1,
				duration: 999999999,
				surface_area: "all",
			},
			{
				id: "normal",
				image: "experimental/civ-stuff.png",
				x: 71,
				y: 153,
				w: 16,
				h: 16,
				pad: -1,
				frames: 1,
				duration: 999999999,
				surface_area: "all",
			},
		],
	},
],
}
