{
id: "civ-tile_bag",
hitpoints: 2,
zorder: -10,
properties: {

	#Returns an object (list index 0), and the commands to remove that object from the list of objects we can return (list index 1).
	extract: "def(bag) if(size(vars.piles[bag]) > 0, [vars.piles[bag][index], [#debug('pile ' + str(bag) + ': ', map(vars.piles[bag][index], 'pile', pile.type)),# set(vars.piles, vars.piles[0:bag] + [vars.piles[bag][0:index] + vars.piles[bag][index+1:size(vars.piles[bag])]] + vars.piles[bag+1:size(vars.piles)])  ]] where index = (1 d size(vars.piles[bag])) - 1)",
	spawn_point: "{'x' -> self.midpoint_x, 'y' -> self.y}",
},
vars: {

	#This is used as the current spot in your hand to deal to. It may be safely set.
	#
	on_deal_tile: 0,
},
consts: {

	#These are the number of tiles each hand contains.
	#
	num_farm: 20,
	num_mine: 20,
	num_war: 20,
	num_settle: 20,
},
on_create: "[
		set(piles, [
			[]
				+ map(range(consts.num_farm), object('civ-tile_farm', bag_x, bag_y, facing))
				+ map(range(consts.num_mine), object('civ-tile_mine', bag_x, bag_y, facing))
				+ map(range(consts.num_war), object('civ-tile_war', bag_x, bag_y, facing))
				+ map(range(consts.num_settle), object('civ-tile_settle', bag_x, bag_y, facing))
				,
			[]
				+ map(range(consts.num_farm), object('civ-tile_farm', bag_x, bag_y, facing))
				+ map(range(consts.num_mine), object('civ-tile_mine', bag_x, bag_y, facing))
				+ map(range(consts.num_war), object('civ-tile_war', bag_x, bag_y, facing))
				+ map(range(consts.num_settle), object('civ-tile_settle', bag_x, bag_y, facing))
				,
			[]
				+ map(range(consts.num_farm), object('civ-tile_farm', bag_x, bag_y, facing))
				+ map(range(consts.num_mine), object('civ-tile_mine', bag_x, bag_y, facing))
				+ map(range(consts.num_war), object('civ-tile_war', bag_x, bag_y, facing))
				+ map(range(consts.num_settle), object('civ-tile_settle', bag_x, bag_y, facing))
				,
			[]
				+ map(range(consts.num_farm), object('civ-tile_farm', bag_x, bag_y, facing))
				+ map(range(consts.num_mine), object('civ-tile_mine', bag_x, bag_y, facing))
				+ map(range(consts.num_war), object('civ-tile_war', bag_x, bag_y, facing))
				+ map(range(consts.num_settle), object('civ-tile_settle', bag_x, bag_y, facing)) 
		] where bag_x = midpoint_x where bag_y = y),
		
		set(vars.pile, [] + map(range(consts.num_farm), object('civ-tile_blank', bag_x, bag_y, facing))
		) where bag_x = spawn_point.x where bag_y = spawn_point.y,
		
		spawn('civ_end_turn', midpoint_x, midpoint_y+125, 1),
		]",
on_done_create: "if('human' in vars.spawner.vars.players,
		map(range(size(evts)), 'evt_num', 
			schedule(evt_num*4+100*(not 'human' = vars.spawner.vars.players[0]), evts[evt_num])
			)
		where evts = map(range(vars.spawner.vars.hand_size), fire_event('deal_p1')))",
on_one: "debug('1')",
on_two: "debug('2')",
on_pile: "debug('vp', vars.pile)",

#deal player 1 a new tile for hand slot vars.on_deal_tile, enlarging the hand list if needed
#
on_deal_p1: "[set(vars.on_deal_tile, vars.on_deal_tile + 1),
		#debug(to_pop[0].type),#
		add_object(to_pop[0]), 
		set(to_pop[0].vars.hand_pos, vars.on_deal_tile),
		set(to_pop[0].animation, vars.spawner.consts.tile_types[vars.spawner.vars.turn]),
		to_pop[0].go_to([loc[0],loc[1]]) where loc = vars.spawner.dealt_hand_loc(0, vars.on_deal_tile), 
		set(vars.spawner.vars.hand, vars.spawner.vars.hand + [to_pop[0]]), 
		#set(vars.spawner.vars.hand, vars.spawner.vars.hand[0:vars.on_deal_tile] + [to_pop[0]] + vars.spawner.vars.hand[vars.on_deal_tile+1:size(vars.spawner.vars.hand)]),#
		to_pop[1],
		#debug('Dealt tile. Cycle {cycle}, index {vars.on_deal_tile}.'),#
		] where to_pop = extract(vars.spawner.vars.turn)",
on_end_anim: "animation('normal')",
editor_info: {
	category: "crazy-stuff",
},
animation: {
	id: "normal",
	image: "experimental/civ-stuff.png",
	x: 79,
	y: 35,
	w: 74,
	h: 105,
	pad: 0,
	frames: 1,
	duration: 6431,
},
}