{
hitpoints: 2,
zorder: 0,
properties: {

	#Returns an object (list index 0), and the commands to remove that object from the list of objects we can return (list index 1).
	go_to: "def(pos) go_to_over(pos, 20)",
	go_to_over: "def(pos, frames) map(range(frames), 'step', schedule(frames - step, [	set(self.x, pos[0] + 0.0 + ((self.x-pos[0])/frames)*step ) , 
																							set(self.y, pos[1] + 0.0 + ((self.y-pos[1])/frames)*step ) ]))",
	kingdom_internal: "def(already_found)
		        if([midpoint_x,midpoint_y] in already_found, [],
		   [me] + if(vars.tile_left.animation = self.animation, vars.tile_left.kingdom_internal(fnd), [])
			    + if(vars.tile_right.animation = self.animation, vars.tile_right.kingdom_internal(fnd), [])
			    + if(vars.tile_up.animation = self.animation, vars.tile_up.kingdom_internal(fnd), [])
			    + if(vars.tile_down.animation = self.animation, vars.tile_down.kingdom_internal(fnd), []))
		      where fnd = already_found + [[midpoint_x,midpoint_y]]",
	kingdom_internal_pos: "def(already_found, xpos, ypos, side)
		 if([xpos,ypos] in already_found, [],
		   [me] + if(tile_left.animation = side, tile_left.kingdom_internal(fnd), [])
			    + if(tile_right.animation = side, tile_right.kingdom_internal(fnd), [])
			    + if(tile_up.animation = side, tile_up.kingdom_internal(fnd), [])
			    + if(tile_down.animation = side, tile_down.kingdom_internal(fnd), []))
		      where fnd = already_found + [[xpos,ypos]],
		            tile_left = find(logic.vars.play, 'obj', obj.midpoint_x = (xpos - 32) and obj.midpoint_y = ypos and obj.animation = side), #disabling this does nothing O_o#
		            tile_right = find(logic.vars.play, 'obj', obj.midpoint_x = (xpos + 32) and obj.midpoint_y = ypos and obj.animation = side),
		            tile_up = find(logic.vars.play, 'obj', obj.midpoint_x = xpos and obj.midpoint_y = (ypos - 32) and obj.animation = side),
		            tile_down = find(logic.vars.play, 'obj', obj.midpoint_x = xpos and obj.midpoint_y = (ypos + 32) and obj.animation = side)
			  where logic = get_object(level, 'logic')",
	kingdom_pos: "def(coords) kingdom_internal_pos([], coords[0], coords[1], self.animation)",
	kingdom: "vars.kingdom_in",

	#this bit is working with regards to tile side, it seems
	#
	search_adjacent_connected_to_farm: "def(xpos, ypos, side)
		       (tile_left.animation = self.animation  and tile_left.vars.connected_to_farm) or
		       (tile_right.animation = self.animation and tile_right.vars.connected_to_farm) or
		       (tile_up.animation = self.animation    and tile_up.vars.connected_to_farm) or
		       (tile_down.animation = self.animation  and tile_down.vars.connected_to_farm)
			    where
		            tile_left = find(logic.vars.play, 'obj', obj.midpoint_x = (xpos - 32) and obj.midpoint_y = ypos and obj.animation = side),
		            tile_right = find(logic.vars.play, 'obj', obj.midpoint_x = (xpos + 32) and obj.midpoint_y = ypos and obj.animation = side),
		            tile_up = find(logic.vars.play, 'obj', obj.midpoint_x = xpos and obj.midpoint_y = (ypos - 32) and obj.animation = side),
		            tile_down = find(logic.vars.play, 'obj', obj.midpoint_x = xpos and obj.midpoint_y = (ypos + 32) and obj.animation = side)
		        where logic = get_object(level, 'logic')",
	help: "def(mouse) if(abs(mouse.pos_x()-midpoint_x) < logic.consts.tile_size and abs(mouse.pos_y()-midpoint_y) < logic.consts.tile_size, ~This is a blank tile. It doesn't do anything.~)",
},
vars: {
	tile_left: null,
	tile_right: null,
	tile_up: null,
	tile_down: null,
	cache_version: -1,
	kingdom_in: null,
	connected_to_farm: 0,
	bldg_status: 0,
},
on_nix: "die()",
on_create: "set(vars.logic, get_object(level, 'logic'))",

#Do not use in properties.
on_calculate_surroundings: "[#debug('Calc surroundings on cycle {level.player.cycle}.'),#
		   set(vars.tile_left, find(logic.vars.play, 'obj', obj.midpoint_x = (context.midpoint_x - 32) and obj.midpoint_y = context.midpoint_y)),
		   set(vars.tile_right, find(logic.vars.play, 'obj', obj.midpoint_x = (context.midpoint_x + 32) and obj.midpoint_y = context.midpoint_y)),
		   set(vars.tile_up, find(logic.vars.play, 'obj', obj.midpoint_x = context.midpoint_x and obj.midpoint_y = (context.midpoint_y - 32))),
		   set(vars.tile_down, find(logic.vars.play, 'obj', obj.midpoint_x = context.midpoint_x and obj.midpoint_y = (context.midpoint_y + 32)))
	] where logic = get_object(level, 'logic')",
on_calculate_kingdom: "[
	      if(vars.cache_version != arg.vars.cache_version,
				  [
				  map(new_kingdom, 't', set(t.vars.kingdom_in, new_kingdom)),
				  map(new_kingdom, 't', set(t.vars.connected_to_farm, has_farm)) where has_farm = if(find(new_kingdom, 't', t.type = 'civ-tile_farm' and t.animation = self.animation), 1, 0),
				  map(new_kingdom, 't', set(t.vars.cache_version, context.arg.vars.cache_version))
				  ]
				   where new_kingdom = kingdom_internal([])
				  )]",
on_lmb_down: "if(abs(arg.pos_x()-midpoint_x) < logic.consts.tile_size and abs(arg.pos_y()-midpoint_y) < logic.consts.tile_size, 
			[fire_event('track_mouse'), 
			set(zorder, zorder + 10),
			vars.logic.draw_blackout(self),
			])",
on_track_mouse: "[
		set(midpoint_x, level.player.vars.mouse.pos_x()),
		set(midpoint_y, level.player.vars.mouse.pos_y()),
		if('left' in level.player.vars.mouse.vars.parent_player.ctrl_mice[level.player.vars.mouse.vars.parent_player.vars.number], 
			schedule(1, fire_event('track_mouse')), 
			[fire_event(get_object(level, 'logic'), 'release_tile', self), [set(zorder, zorder - 10), logic.clear_blackout]]),
		]",
on_replace_select: "if(abs(arg.pos_x()-midpoint_x) < logic.consts.tile_size and abs(arg.pos_y()-midpoint_y) < logic.consts.tile_size and (not logic.mouse_on_tile()),
			if((not self in logic.vars.toReplace) and size(logic.vars.not_refilled_when_played+logic.vars.toReplace) < logic.vars.max_tiles_to_replace,
			[set(blue, 100), set(red, 200),
			set(logic.vars.toReplace, logic.vars.toReplace + [self]),
			fire_event(logic, 'refresh_replace_selected_text'),
			],
			[set(blue, 256), set(red, 256),
			set(logic.vars.toReplace, filter(logic.vars.toReplace, 'obj', obj != context.self)),
			#map(logic.vars.toReplace, 'obj', debug(obj.x, ' ', self.x)),
			debug(filter(logic.vars.toReplace, 'obj', obj.x != self.x)),#
			]))",
on_end_anim: "set(animation, animation)",
}