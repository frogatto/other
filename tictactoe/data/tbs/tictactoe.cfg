{
	functions: "
	  def player_fills(moves, n, row_col) size(filter(moves, value[row_col] = n)) = 3;
	  def player_diagonal(moves) size(filter(moves, value[0] = value[1])) = 3 or
	                             size(filter(moves, value[0]+value[1] = 2)) = 3;
	  def player_wins(moves, nplayer)
	      filter(range(3), player_fills(player_moves, nplayer, 0) or
		                   player_fills(player_moves, nplayer, 1)) or
	      player_diagonal(player_moves)
	      where player_moves = filter(moves, index%2 = nplayer);
	  def winner(doc) if(player_wins(doc.moves, 0), 0,
	                  if(player_wins(doc.moves, 1), 1, -1));
	
	1",
	handlers: {
		start: "set(doc, { moves: [], active_player: 0 })",

		//Event triggered anytime we receive a message from a player.
		message: "[if(message.type = 'move' and player = doc.active_player,
		          if((message.pos in all_board_pos) and
				     not (message.pos in doc.moves),
					 [add(doc.moves, [message.pos]),
					  set(doc.active_player, (doc.active_player+1)%2)
					 ]
					 ))]
				  where all_board_pos = [[a,b] | a <- range(3), b <- range(3)]",

		//This is used anytime we send the game state, to transform the
		//document. We insert the calculation of the winner, if there is one.
		transform: "set(message.winner, winner(message))"
	}
}
