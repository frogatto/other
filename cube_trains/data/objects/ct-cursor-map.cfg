{
id: "ct-cursor-map",
prototype: ["player_input"],
is_human: true,
zorder: 5,

properties: {
	camera_dimensions: "list_single_divide(level.camera_position[2:4], 2)",
	},

vars: {
	saved_maps: {},
	ff: false,
	},
	
consts: {
	mapSize: ["@eval 2668/2","@eval 1742/2"], //These magic numbers here are the large bounds of the map object. The map graphic starts at [0,0] and goes to [1334,871].
	edit_mode: 0,
	},
	
tmp: {
	mice_could_drag: {},
	mice_dragging: {},
	},
	
on_load: "[
	set(alpha, 0),
	if(can_load_game() and (not vars.game_started or consts.edit_mode), [
		set(self.vars.saved_maps, find(get_save_document(0).character, value.is_human).vars.saved_maps),
		set(self.vars.won_game, find(get_save_document(0).character, value.is_human).vars.won_game),
		fire_event('enter_level'),
		],[
		fire_event('enter_level'),
		if(consts.edit_mode, set(vars.game_started, 0)),
		]),
	]",

"on_mouse_down*": "
	if(consts.edit_mode and not handled, [
		spawn(	'ct-map-marker', 
				midpoint_x, midpoint_y, 1, 
				[set(child.vars.reference_anchor, adjusted_mice[0]),
				set(child.vars.anchorPoint, 5),
				]),	
		],[
		if(not handled, [
			set(tmp.mice_could_drag, tmp.mice_could_drag + {(mouse_index): [mouse_x, mouse_y]}),
		]),
	])",
	
"on_mouse_move*": "if(not handled, [
	if(tmp.mice_could_drag[mouse_index] and distance(tmp.mice_could_drag[mouse_index], [mouse_x, mouse_y]) > 15, [
		set(tmp.mice_could_drag, tmp.mice_could_drag + {(mouse_index): null}),
		set(tmp.mice_dragging, tmp.mice_dragging + {(mouse_index): [mouse_x, mouse_y]}),
		]),
	if(tmp.mice_dragging[mouse_index], [
		set(x, x+(tmp.mice_dragging[mouse_index][0]-mouse_x)),
		set(y, y+(tmp.mice_dragging[mouse_index][1]-mouse_y)),
		set(tmp.mice_dragging, tmp.mice_dragging + {(mouse_index): [mouse_x, mouse_y]}),
		]),
	])",
	
"on_mouse_up*": "[
		set(tmp.mice_could_drag, tmp.mice_could_drag + {(mouse_index): null}),
		set(tmp.mice_dragging, tmp.mice_dragging + {(mouse_index): null}),
	]",

on_process: "[
	proto_event('player_input', 'process'),
	set(midpoint_x, constrain(0+camera_dimensions[0], midpoint_x+ctrl_right*velocity-ctrl_left*velocity, consts.mapSize[0]-camera_dimensions[0])),
	set(midpoint_y, constrain(0+camera_dimensions[1], midpoint_y+ctrl_down*velocity-ctrl_up*velocity, consts.mapSize[1]-camera_dimensions[1])),
	set(level.lock_screen, mid_xy), //Why? Map won't move without this.
	] where
	velocity = 50",
	
	
	//[	constrain(0+camera_dimensions[0], level.player.midpoint_x, consts.mapSize[0]-camera_dimensions[0]), 
	//	constrain(0+camera_dimensions[1], level.player.midpoint_y, consts.mapSize[1]-camera_dimensions[1])]

on_enter_level: "[
	set(tmp.playing_music, true),
	if(not tmp.playing_music,
		music_onetime('TrainSongSlowerTempo.ogg')),
	transform(level.chars, if(v.vars.is_widget or v.type = 'ct-map-marker.line', remove_object(v))),
	transform(unique(vars.widgets), transform([v] + v.vars.targets, [add_object(v), fire_event(v, 'enter_level')])),
	schedule(2, transform(unique(vars.widgets), [fire_event(v, 'enter_level')])),
	schedule(2, fire_event('done_enter_level')),
	if(not consts.edit_mode,
		set(vars.game_started, 1)),
	]",

on_done_enter_level: "schedule(3, [
	save_game(),
	if(not find(filter(level.chars, value.type = 'ct-map-marker'), value.animation != 'green') or won_game, [
		set(won_game, true),
		fire_event('roll_credits'),
		]),
	if(size(filter(level.chars, value.animation='green')) > 6, [
		set(ntxt.use_absolute_screen_coordinates, true),
		set(ntxt.z, 11),
		set(ntxt.x, level.camera_position[2]-ntxt.img_w-5),
		set(ntxt.y, level.camera_position[3]-20),
		ntxt.set_text({
			text:'Expansion available - 10 more levels, 1 new editor block. Only 2 dollars on cubetrains.com.',
			size:1,
			align:'right',
			}),
		add_object(ntxt),
		] where ntxt = object('text_controller'))
	])",

//on_ctrl_jump: "fire_event('roll_credits')",

on_roll_credits: "[
	save_game(),
	map(level.chars, set(value.vars.button_disabled, true)),
	spawn('ct-credits-whiteness', 0, 0, 1, [	
		set(child.alpha, 0),
		set(child.event_handlers.end_credits, 'die()'),
		set(child.event_handlers.process, 'add(alpha, 5)'), ]),
	schedule(60, [
		spawn('ct-credits-whiteness', 0, 0, 1, [
			set(child.animation, 'grey'),
			set(child.zorder, 21),
			schedule(ff or blink_time, [
				set(child.alpha, 0),
				schedule((ff or wait_time)+1, remove_object(child)),
				spawn('ct-credits-ct-logo', level.camera_position[2]/2, level.camera_position[3]/3-17, 1, [
					set(child.event_handlers.end_credits, 'die()'),
					set(child.id_str, 'credits-logo'),
					]),
				schedule(ff or wait_time, [
					spawn('ct-credits-whiteness', 0, 0, 1, [
						set(child.zorder, 21),
						set(child.animation, 'grey'),
						schedule(ff or blink_time, [
							set(child.alpha, 0),
							set(child.event_handlers.end_credits, 'die()'),
							spawn('text_controller', level.camera_position[2]/2, level.camera_position[3]/3+120, 1, [
								set(child.use_absolute_screen_coordinates, true),
								set(child.id_str, 'byline'),
								child.set_text({'text':'A David D. Roberts Game', align:'center', size:1})]),
							schedule(ff or wait_time, [
								map(range(size(credit_list)), schedule(ff or 130*value, movingText(credit_list[value]))) // #credit-timing
									where credit_list = [	['Music',						'Ryan Reilly (Rain)'],
															['Consulting',					'Richard Kettering (Jetrel)'],
															['SFX Consulting',				'Adam Rinsky (ActionJack)'],
															['Core Engine Improvement',		'David White (Sirp)'],
															['General Engine Improvement',	'Kristina Simpson (Krista^)'], 
															['Anura game engine from',		'Frogatto and Friends'], ],
								]),
							set(child.event_handlers.end_credits, 'die()'),
							schedule(ff or 830, [ // #credit-timing
								movingText(['', 'Thanks, everyone!']),
								schedule(ff or 190, [ // #credit-timing
									movingText(['And you--', 'Thanks for playing.']),
									schedule(ff or 160, /* #credit-timing */ ([// eval(q[ //Can't get spawned objects from above here. So, we'll just make a second event... not 'good' programming, but it's not worth the effort to go back and fix things to be the way they should be.
										fire_event(self, 'roll_more_credits')
										])),
									]),
								]),
							]) where movingText = def(texts) [
									spawn('text_controller', level.camera_position[2]/2-75, level.camera_position[3]/1.5-10, 1, [
										common_commands(child),
										child.set_text({'text':texts[0], size:1})]),
									spawn('text_controller', level.camera_position[2]/2-55, level.camera_position[3]/1.5+10, 1, [
										common_commands(child),
										child.set_text({'text':texts[1]})]),
									] where common_commands = def(child) [
										schedule(display_duration, remove_object(child)),
										set(child.use_absolute_screen_coordinates, true),
										map(range(display_duration), 'frame', 
											schedule(frame, [
												set(child.text_alpha, 
													constrain(0, 500*sin(tween(0,180, frame/decimal(display_duration))), 255)),
												set(child.x, (child.x + 
														if(frame < display_duration/2, 
															max(tween_in, middle),
															min(tween_out, middle)) - domain/2
														where tween_in = 	tween(0, domain, sin(frame/decimal(display_duration)*180)	) + 25
														where tween_out = 	tween(0, domain, 1-sin(frame/decimal(display_duration)*180)	) - 25
														where middle = 		tween(0+15, domain-15, frame/decimal(display_duration)		)     
													)),
												])),	
									] where display_duration = 140 // #credit-timing
									where domain = 200,
						]),
					]),
				]),
			]),
		]),
	] where
	blink_time = 9,
	wait_time = 17,
	text_display = 40",

on_roll_more_credits: "[
	map(range(80), schedule(value, set(obj.y, obj.y-value)) where obj = find(level.chars, value.id_str = 'credits-logo')),
	map(range(50), schedule(value, set(obj.text_alpha, obj.text_alpha - value*5)) where obj = find(level.chars, value.id_str = 'byline')),
	schedule(51, [
		remove_object(find(level.chars, value.id_str = 'byline')),
		spawn('text_controller', level.camera_position[2]/2, level.camera_position[3]/2, 1, [
			set(child.use_absolute_screen_coordinates, true),
			set(child.event_handlers.remove_final_score, 'die()'),
			child.set_text({'text':'Your final score is:', align:'center', size:2})]),
		schedule(ff or 40, [
			spawn('text_controller', level.camera_position[2]/2, level.camera_position[3]/2+30, 1, [
				set(child.use_absolute_screen_coordinates, true),
				set(child.event_handlers.remove_final_score, 'die()'),
				child.set_text({'text': sum(map(filter(level.chars, value.type = 'ct-map-marker' and not value.vars.level in ['editor', 'player']), value.vars.targetData.score)), align:'center', size:6})]),
			schedule(40, [
				spawn('ct-button-return', level.camera_position[2]/2, level.camera_position[3]-125, 1, [
					set(child.event_handlers.remove_final_score, 'die()'),
					set(child.event_handlers.mouse_over, q([proto_event('ct-button-nav', 'mouse_over'), swallow_event()])),
					set(child.event_handlers.mouse_not_over, q([proto_event('ct-button-nav', 'mouse_not_over'), swallow_event()])),
					set(child.vars.action, fire_event(self, 'done_credits')), 
					set(child.event_handlers.create, 'swallow_event()'), 
					set(child.event_handlers.first_cycle, 'swallow_event()'), ]),
				]),
			]),
		]),
	]",
	
on_done_credits: "map(level.chars, [
	fire_event(value, 'remove_final_score'),
	fire_event(value, 'end_credits'),
	set(value.vars.button_disabled, null),
	])",

animation: [
	{
		scale: 1,

		"@base": true,

	
	
	
	},
		{
			"id": "normal",
			"image": "effects/particles.png",
			"rect": [23,197,49,224]
		},
],
}