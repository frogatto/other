{
id: "ct-cursor-play",
prototype: ["ct-cursor"],
is_human: true,
properties: {
	is_in_limits: "def(loc, border=0) not find(list_subtract(self.vars.limits.min or [0,0,0], loc) + list_subtract(loc, self.vars.limits.max or [0,0,0]), 'num', num > border)",
	additionalPlacementRequirementsMet: "def(obj, at_pos) obj.additionalPlacementRequirementsMet(at_pos)",
	#set_alpha: "def(val) set(alpha, 0)",
	//train_crashed: "def(train, error) debug('A train crashed! Try again.')",
	tools: "{ #These are the tools which appear in the toolboxs to the 1st of the screen. There is only one atm, called 'toolbox'.#
		'toolbox' -> map(
			[	'legs-5', 
				'bridge-tiny-19', 
				'metaraise-1', 
				'metatrack-19', 
				'metatrack-13', 
				'edge-hedge-1',
			], 'tool_name', object('ct-button-${tool_name}'))}",
},

/*
There might be a better, elegant solution, say, collecting small delta events, instead.
Like, say, we have a list containing every possible place-able piece for the level for every tile in the level bounds, and then we just count that.
For Wuthering Heights, which has 420 spots, times 17 place-able pieces, which comes out to 7140 key/value pairs, over say 20 levels total (for now) coming out to a grand total of 140,000 key/value pairs for the entire game to record all the solutions forever. If we collect data separately for quit (lost) and quit (won), we're up to about 300,000 pairs we need to store, or significantly *less* room than this one frogatto level under the old system where we had several billion data points.
*/

vars: {
	pieces: [
		"ct-legs-5","ct-bridge-tiny-19","ct-bridge-tiny-37",
		"ct-metatrack-19","ct-metatrack-37","ct-metatrack-13","ct-metatrack-17","ct-metatrack-39","ct-metatrack-79",
		"ct-metaraise-1","ct-metaraise-3","ct-metaraise-7","ct-metaraise-9",
		"ct-edge-hedge-1","ct-edge-hedge-3","ct-edge-hedge-7","ct-edge-hedge-9",
		],
	hotblocklist: [	'ct-edge-hedge-1', 
					'ct-legs-5',
					'ct-bridge-tiny-19',
					'ct-metaraise-1',
					'ct-metatrack-19',
					'ct-metatrack-13',
					'ct-edge-hedge-1', 
					'ct-edge-hedge-1', 
					'ct-edge-hedge-1', 
					'ct-edge-hedge-1', 
					],
	trains_are_running: 0,
},

on_first_cycle: "[
	proto_event('ct-cursor', 'first_cycle'), 
		
	] where button = {
						}
	where margin = -10",

on_done_create: "[proto_event('ct-cursor', 'done_create'), set(alpha, 0), remove_object(text_ctrl)]",

xon_debug2: "[
	//set_clipboard_text(),
	//debug('copying hello to clipboard'),
	vars.message.add_text(['Copied level to clipboard.', 'Paste it somewhere to share.']),
	set_clipboard_text(dump('{\n' + str(
		map_cat_delim(filter(serialized_level, value), ',\n')
		) + '\n}' )),
	] where map_cat_delim = def(list, delim) list_cat_delim(map(keys(list), if(is_string(value), q(') + value + q('), str(value)) + ': ' + if(is_string(list[value]), '~' + list[value] + '~', str(list[value]))), delim)",


xon_help: "debug('\n = Controls: =\nArrow keys move horisonally, left ctrl and {k.high} move vertically. Use ' + k['rotate cw'] + ' and ' + k['rotate ccw'] + ' to rotate the view. ' + k['select left'] + ' and ' + k['select right'] + ' change selection, right ctrl places, and {k.unplace} removes blocks. Press the spacebar to start the trains. You can [U]ndo and [R]edo most actions.\n\n = Quick-Saving: =\nf3 quick-saves the map, and f4 quick-loads it. While quick-saves are retained between sessions, they only do so when Cube Trains has exited normally. In event of a crash, your current level will be lost.\n\n = Keyboard Layouts: =\nNumpad 1 -> Dvorak, Numpad 2 -> Qwerty, Numpad 3 -> Azerty.'
	where k = keymap[keymode])",
	
#on_debug2: "debug('e[1;34mbluee[0m')",

animation: [
	{
		scale: 1,
		"@base": true,
	},
	{
		image: "experimental/cube trains/0029.png",
		rect: [0,0,255,255],
		id: "grey",
	},
	{
		image: "experimental/cube trains/0029.png",
		rect: [0,0,255,255],
		id: "red",
	},
	{
		"id": "blue",
		"image": "experimental/cube trains/0029.png",
		"rect": [0,0,255,255]
	},
],
}