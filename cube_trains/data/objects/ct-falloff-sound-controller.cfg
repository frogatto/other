{
id: "ct-falloff-sound-controller",
hidden_in_game: true,
always_active: true,

properties: {
	add: "def(source) [
		add(self.vars.monitoring, [source]),
		set(source.vars._sound_controller, self),
	]",
	remove: "def(source) [
		set(self.vars.monitoring, newMonitoring),
		set(source.vars._sound_controller, null),
		//if(not newMonitoring, remove_object(self)),
	] where newMonitoring = filter(self.vars.monitoring, value!=source)",
	
	loudest_source: "max(map(self.vars.monitoring, value.sound_volume_multiplier(value, level.player)))"
},

vars: {
	sound_file: false,
	monitoring: [],		//Sources to monitor. We'll only play the loudest one... not technically correct, but close enough.
	max_delta: 0.1,
	old_loudest_source: null,
},

on_create: "sound_loop(sound_file, 0)",

on_process: "[
	set(old_loudest_source, newVol),
	sound_volume(newVol*128),
	//debug(newVol),
	] where newVol = 
		if(old_loudest_source != null, 
			constrain(	old_loudest_source - max_delta, 
						loudest_source, 
						old_loudest_source + max_delta), 
			loudest_source)",

animation: {
	id: "normal",
	image: "effects/particles.png",
	x: 179,
	y: 166,
	w: 28,
	h: 28,
	frames: 1,
	duration: 1000,
},
}

