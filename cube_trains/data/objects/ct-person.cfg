{
id: "ct-person",
prototype: ["ct-3d", "ct-pather"],
zsub_order: -1,

properties: {
	setToGrid: "def(crd) [ #takes a three-integer list, and sets screen position based on those.#
			set(self.midpoint_x, lpfc[0]+offset[0]),
			set(self.y, lpfc[1]+offset[1]-img_h),
			set(self.z, crd[2]*8+self.vars.encloses*7+self.vars.zoffset),
			set(self.vars.location, crd),
			] where lpfc = level_position_from_coordinate(crd)",
			
	set_alpha: "def(val) set(self.alpha, val+200)",
	
	applyRotateCustom: "def(delta, obj) set(obj.vars.activity, 
		{'id', vars.activity.id} +
		if(vars.activity.target, {'target', getRotateZ(vars.activity.target, delta)}, {})
		#We don't set the tobj from doActivity here, it might have been removed from the level by the rotation code.#
		)",
		
	moveCloserTo: "def(to) 
		setToGrid([dest[0], dest[1], vars.location[2]])
		where dest = orbit(vars.location[0], vars.location[1], angle(vars.location[0]*10, vars.location[1]*10, to[0]*10, to[1]*10), vars.speed)",
	
	doActivity: "def(act)
		switch(act,
			'shelter', 	set(activity, {'id':'seek', 'target':tgt.vars.location, 'tobj':tgt})
							where tgt = tgts[(1d size(tgts))-1] #TODO: refine this to not crash when we find no targets.#
							where tgts = getTargets(location, ['shelter', 'exit']),
			#idle,#		set(activity, {'id': 'idle', 'target': vars.location})
		)",
	
	directTo: #Move towards a target. 'activity' must have a valid 'target' value.
		"if(not length(vars.location[0], vars.location[1], vars.activity.target[0], vars.activity.target[1]) < 0.25, 
			setToGrid([dest[0], dest[1], vars.location[2]]) where dest = orbit(vars.location[0], vars.location[1], angle(vars.location[0], vars.location[1], vars.activity.target[0], vars.activity.target[1]), vars.speed), 
			fire_event('do_something_else'))",
			
	pathTo: #Move towards a target along a precalculated path or calculate a path to the target. Activity must, of course, have target defined.
		"if(self.vars.calculatedPath.complete, 
			if(size(self.vars.calculatedPath.tiles),[
				moveCloserTo(self.vars.calculatedPath.tiles[0]),
				if(length(	self.vars.location[0], 
							self.vars.location[1],
							self.vars.calculatedPath.tiles[0][0], 
							self.vars.calculatedPath.tiles[0][1]) < 0.25,
					add(self.vars.calculatedPath, {'tiles':self.vars.calculatedPath.tiles[1:]}))
				],
				fire_event('do_something_else')),
			[#debug({'RESULTS': cp}),#
			set(calculatedPath, cp),
			] where cp = calculatePath(vars.activity.target) + {'retry':10d25}
		)",
},

vars: {
	zoffset: 3,
	
	#parameter-variables
	offset: [255,380], #Offset of the unit from x/y origin of the block at [0,0,0] for the unit to appear to be standing on the center of said block. You probably shouldn't fiddle with this one.
	activity: {"id": "stasis"}, #The current activity. {'id': 'string', 'target': [x,y,z]}
	speed: "@eval 0.02 + (2d5)/1000.0",
	
	#non-paramenter varibales, don't fiddle with these
	location: [0,0,0], #the current location. Use setToGrid() to set it.
	calculatedPath: {'complete': 0, 'tiles': []}, #stores the basic path we've calculated so far
	},
	
on_do_something_else: "set(activity, {'id': 'idle', 'target': on_block(location)})",
	
#first_cycle: "setToGrid(dump(location))",
first_cycle: "if(not level.player.vars.edit_all, [schedule(2 #minimum for ped_utils to fill up#, fire_event('debug2'))])",
on_debug2: "[doActivity('shelter'), fire_event('debug3')]",
#on_debug3: "[debug(activity)]",
on_process: "[#if(cycle%10=5, debug(level.player.vars.groupMap)),#
	switch(activity.id,
		'seek', pathTo,
		'stasis', 0,
		'idle', #debug('Nothing to do for ${type} at ${location}. So bored.')#0
		),
	]",

animation: [
	{
		scale: 1,

		"@base": true,

	
	
	
	},
	{
		id: "man",
		image: "experimental/cube trains/custom/people-sihlouttes.png",
		x:10, y:12, w:11, h:24,
	},
	{
		id: "child",
		image: "experimental/cube trains/custom/people-sihlouttes.png",
		x:21, y:12, w:11, h:24,
	},
	{
		id: "normal",
		image: "experimental/cube trains/custom/people-sihlouttes.png",
		x:31, y:12, w:11, h:24,
	},
		{
			"h": 48,
			"id": "woman",
			"image": "experimental/cube trains/custom/people-sihlouttes.png",
			"w": 20,
			"x": 42,
			"y": 42
		},
	],
}