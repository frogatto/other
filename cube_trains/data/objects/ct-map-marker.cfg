# How to create a new main map:
# 1) Delete saves.
# 2) Copy main-map-empty.cfg over into titlescreen.cfg.
# 3) Change this object to drag_input, and change the ct-cursor-map constant edit_mode to true.
# 4) Press 's' to make new nodes, and click and drag them for additional options.
# 5) Press ctrl-s to save. Copy the save file over to titlescreen.cfg. Delete the save.
# 6) Undo step #3.
# 7) Launch game. Note that tutorial-1 is hard-coded to be partially solved, right now.
# Note: If you edited the loaded game, you may have to remove the game_started variable from titlescreen.

{
id: "ct-map-marker",
prototype: ["button_input"], #drag_input - makes the object behave as editable. button_input - makes the object behave normally.
zorder: 0,
always_active: true,
use_absolute_screen_coordinates: false,

properties: {
	at: "[midpoint_x, midpoint_y]",
	connected: "targeted_by + targets",
	targetData: "if(level.player.vars.saved_maps[myLevelName], 
			level.player.vars.saved_maps[myLevelName], 
			myLevelData)",
	myLevelData: "find(consts.levels, 'Level', Level.id = myLevelName)",
	myLevelName: "if(self.vars.level in ['editor', 'player'], 'custom', self.vars.level)"
	},

vars: {
	level: '',
	text: '',
	#connections
	targeted_by: [],
	targets:	 [],
	},
	
consts: {
	levels: "@include modules/cube_trains/data/objects/additional_maps.ffl",
	starting_levels: ['Tutorial 1'],
	animation_lock: true,
	},
	
on_load: "[
	text(vars.text, 'white_outline', 1, 1),
	]",
	
on_drag_start: "if(consts.am_drag, [
	proto_event('drag_input', 'drag_start'), 
	set(tmp.origin, [midpoint_x, midpoint_y]),
	])", #Store where we started dragging from, might be useful.
	
on_drag: "if(consts.am_drag, [
	proto_event('drag_input', 'drag'), 
	transform(connected, v.stretch(v.vars.connects[0].at, v.vars.connects[1].at)),
	
	])",
	
on_click: "if(consts.am_drag and not level.player.tmp.mouse_dragging_object, speech_dialog(
	narrator,	['Choose an action.']
				+ flex_sum(
					transform(
						filter(transform(consts.levels, v.id) + ['editor', 'player'], name,
							not name in existing), 
						['Set level to ${v}.', [
							setNewLevel(v),
							]])
					+ [['No level link.', [
						setNewLevel(''),
					]]]
					+ [['Remove this marker.', [
						transform(targets+targeted_by, fire_event(v, 'delete', self)),
						deactivate_widget,
						die(),
					]]]
					+ [['Remove outgoing line.', [
						if(size(vars.targets), fire_event(vars.targets[size(vars.targets)-1], 'delete', self))
					]]]
					+ [['Cancel.', [
					]]]
					, [])
					where existing = transform(level.chars, v.vars.level)
					where setNewLevel = def(Id) ([ //ID isn't allowed? O_o
							set(vars.level, Id),
							set(vars.text, newText),
							text(newText, 'white_outline', 1, 1),
							] where newText = '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n' + Id),
	))",
	
on_drop: "[
	#Add line between objects…#
	line.stretch(tmp.origin, arg.at),
	schedule(2, fire_event(line, 'load')), //Sometimes, for whatever reason, when we place lines they don't work right the first frame. This is the best of both worlds, since it'll either work right or be corrected the next frame.
	add_object(line),
	add(targets, [line]),
	add(arg.vars.targeted_by, [line]),
	set(line.vars.connects, [self, arg]),
	
	#… and reset our position.#
	set(vars.reference_anchor, tmp.origin),
	fire_event('update_position'),
	] where line = object('${self.type}.line')",
	
on_mouse_not_left_down: "if(consts.am_button and self.animation != 'normal' and not vars.button_disabled, [
	screen_flash([0,0,0,0], screen_fade_out_delta(), screen_fade_steps()+3),
	schedule(screen_fade_steps(), 
		teleport('blank.cfg', '', 'instant', object_playable(
			if(self.vars.level in ['editor'],
					'ct-cursor-edit',
					'ct-cursor-play'
			), 0,0,1,
			{mid_xy: self.mid_xy,
			toLoad: self.vars.targetData, //level data to load (to start off with)
			toRevert: myLevelData, //level data to load when we revert
			mainMapMarker: self.type,
			mainMapPlayer: level.player,
			displayCopyButtons: self.vars.level in ['editor', 'player'],
			}))),
	sound('Laying-Track${4+1d6}.wav', 0.5),
	])",
	
on_enter_level: "[//= fired twice, once to set up changes and once to propigate them. :?
	set(animation, 'normal'),
	set(self.vars.targetData, targetData),
	if(
		find(
			filter(
				flatten(
					transform(connected, v.vars.connects)),
				'points', 
				points != self), 
			'points',
			points.animation = 'green'), //This checks for a green neighbour becase we're black (normal) otherwise.
		set(animation, 'red')),
	if(td.score or vars.level in consts.starting_levels, 
		set(animation, 'yellow')),
	if(td.complete or vars.level in ['editor', 'player'], set(animation, 'green')),
	transform(vars.targets, fire_event(v, 'update_colour')),
	] where td = targetData",

animation: [{
		scale: 1,

		"@base": true,

 //black


	},{
	id: "normal",
	image: "experimental/cube trains/custom/ct-map-marker.png",
	x:192, y:0, w:64, h:64,
	},{
	id: "red",
	image: "experimental/cube trains/custom/ct-map-marker.png",
	x:128, y:0, w:64, h:64,
	},{
	id: "yellow",
	image: "experimental/cube trains/custom/ct-map-marker.png",
	x:0, y:0, w:64, h:64,
	},
		{
			"h": 64,
			"id": "green",
			"image": "experimental/cube trains/custom/ct-map-marker.png",
			"w": 64,
			"x": 64,
			"y": 0
		}],
	
object_type: { #This is a minimal version of frogatto's angled_rope_controller.
	id: "line",
	zorder: -1,
	ignore_collide: true,
	no_compile_image: "experimental/cube trains/custom/map-ropes.png",
	always_active: true,

	properties: {
		stretch: "def(ptA, ptB) if(ptA and ptB, [
			set(self.vars.ptA, ptA), set(self.vars.ptB, ptB),
			set(self.rotate, angle_to(ptA, ptB)+90),
			set(self.mid_xy, list_tween(ptA, ptB, 0.5)),
			set(self.custom_draw, [0, [0,top], 1, [0,top], 2, [0,bot], 3, [0,bot]])
				where top = self.img_h-distance(ptA, ptB)/2 - img_h/2 #Great… yet another formula I don't understand.#
				where bot = distance(ptA, ptB)/2-self.img_h + img_h/2,
			#set(upside_down, -1),#
			])",
		},
	
	on_load: "stretch(ptA, ptB)", #Something's not saved, so we need to call this function again when we load.
	
	on_delete: "[
		transform([ptA, ptP], [	set(v.vars.targeted_by, filter(v.vars.targeted_by, 'tgt', tgt != self)),
								set(v.vars.targets, filter(v.vars.targets, 'tgt', tgt != self))]),
		set(ptA, 0), set(ptB, 0),
		die(),
		]",
		
	#on_update_colour: "debug('test')",
	
	animation: [{
			scale: 1,

			"@base": true,

	
	
	
		},{
		id: "green-red",
		image: "experimental/cube trains/custom/map-ropes.png",
		x:0, y:0, w:2, h:256,
		},{
		id: "green-yellow",
		image: "experimental/cube trains/custom/map-ropes.png",
		x:4, y:0, w:2, h:256,
		},{
		id: "red-yellow",
		image: "experimental/cube trains/custom/map-ropes.png",
		x:8, y:0, w:2, h:256,
		},{
		id: "normal",
		image: "experimental/cube trains/custom/map-ropes2.png",
		x:0, y:0, w:2, h:16,
		},{
		id: "yellow",
		image: "experimental/cube trains/custom/map-ropes2.png",
		x:4, y:0, w:2, h:16,
		},{
		id: "red",
		image: "experimental/cube trains/custom/map-ropes2.png",
		x:8, y:0, w:2, h:16,
		},
			{
				"h": 16,
				"id": "green",
				"image": "experimental/cube trains/custom/map-ropes2.png",
				"w": 2,
				"x": 12,
				"y": 0
			}],
	},
}