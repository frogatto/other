{
id: "ct-cursor-edit",
prototype: ["ct-cursor"],
is_human: true,

#pieces
properties: {
	block_value: "def(objs, value) map(objs, 'obj', obj.change_save_val(value))",
				
	additionalPlacementRequirementsMet: "def(obj, at_pos) true",
	
	is_in_limits: "def(loc, border=0) true",
	
	tools: "{ #These are the tools which appear in the toolboxs to the 1st of the screen. There is only one atm, called 'toolbox'.#
			'toolbox' -> map(
				[	'block-5', 
					'windows-large-5',
					'water-5', 
					'water-surface-5',
					'tunnel-1', 
					'legs-5', 
					'bridge-tiny-19', 
					'metaraise-1', 
					'metatrack-19', 
					'metatrack-13', 
					'awning-1', 
					'awning-5', 
					'tree1-center-1',
					'edge-hedge-1',
				],'tool_name', object('ct-button-${tool_name}'))}",
				
	serialized_level: "serialized_level_ + {'limits': {'max': real_max_limit,'min': real_min_limit}}",
	
	
	#utils
	ubet: "utility_build_on_every_tile('ct-square-shadow-5', 2)",
	utility_build_on_every_tile: "def(type, margin) apply_placement_delta(get_placement_delta( #'MY LIMITS max->6, 4, 0,min->-4, -2, -1#
		flatten(
			map(range(mins[0], maxes[0]), 'xvar',
				map(range(mins[1], maxes[1]), 'yvar',
					map(range(mins[2], maxes[2]), 'zvar',
						{'id' -> type, 'pos' -> [xvar, yvar, zvar]}	))))))
	where maxes = list_single_add(vars.limits.max, margin+1)
	where mins = list_single_subtract(vars.limits.min, margin)
	",
},

# See revision d9d130c2d4a579664acf9ede7b23cab14e48a04d for shader example.
vars: {
	pieces: [
		"ct-block-5", "ct-black-5", "ct-windows-large-5", "ct-ground-support-5", "ct-square-shadow-5",
		"ct-water-5", "ct-water-surface-5",
		"ct-legs-5", "ct-bridge-tiny-19", "ct-bridge-tiny-37", 
		"ct-tunnel-1", "ct-tunnel-3", "ct-tunnel-7", "ct-tunnel-9", 
		"ct-metatrack-19", "ct-metatrack-37", "ct-metatrack-13", "ct-metatrack-17", "ct-metatrack-39", "ct-metatrack-79", 
		"ct-metaraise-1", "ct-metaraise-3", "ct-metaraise-7", "ct-metaraise-9", 
		"ct-tree1-center-1", "ct-tree1-center-3", "ct-tree1-center-7", "ct-tree1-center-9", 
		"ct-edge-hedge-1", "ct-edge-hedge-3", "ct-edge-hedge-7", "ct-edge-hedge-9", 
		"ct-awning-1", "ct-awning-3", "ct-awning-5", "ct-awning-7", "ct-awning-9",
		"ct-group-spawner",
		],
	edit_all: 1,
	piece_selected: 0,
	hotblocklist: [	'ct-edge-hedge-1', 
					'ct-block-5', 
					'ct-windows-large-5',
					'ct-water-5',
					'ct-tunnel-1',
					'ct-awning-1',
					'ct-metatrack-13',
					'ct-tree1-center-1', 
					'ct-edge-hedge-1', 
					'ct-edge-hedge-1', 
					],
},
on_block_alt: "fire_event(arg, 'ctrl_select')",

on_debug2: "[
	//set_clipboard_text(),
	//debug('copying hello to clipboard'),
	vars.message.add_text(['Copied level to clipboard.', 'Paste it somewhere to share.']),
	set_clipboard_text(dump('{\n' + str(
		map_cat_delim(filter(serialized_level, value), ',\n')
		) + '\n}' )),
	] where map_cat_delim = def(list, delim) list_cat_delim(map(keys(list), if(is_string(value), q(') + value + q('), str(value)) + ': ' + if(is_string(list[value]), '~' + list[value] + '~', str(list[value]))), delim)",


on_ctrl_left: "move([0,-1,0])",
on_ctrl_right:"move([0,1,0])",
on_ctrl_up:   "move([1,0,0])",
on_ctrl_down: "move([-1,0,0])",

on_train_right_branch: "[swallow_event(), vars.message.add_text('Some ${if(arg.vars.target_branch != null, arg.vars.target_branch+q( ), q())}trains passed.')]",

animation: [
	{
		scale: 1,
		"@base": true,
	},
	{
		image: "experimental/cube trains/0029.png",
		rect: [0,0,255,255],
		id: "grey",
	},
	{
		image: "experimental/cube trains/0029.png",
		rect: [0,0,255,255],
		id: "red",
	},
	{
		"id": "blue",
		"image": "experimental/cube trains/0029.png",
		"rect": [0,0,255,255]
	},
],
}