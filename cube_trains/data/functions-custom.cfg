[
	#Screen fade is used when switching levels.
	{
		args: "",
		name: "_screen_fade_delta",
		formula: "52",
	},{
		args: "",
		name: "screen_fade_out_delta",
		formula: "[0,0,0,_screen_fade_delta()]",
	},{
		args: "",
		name: "screen_fade_in_delta",
		formula: "[0,0,0,-_screen_fade_delta()]",
	},{
		args: "",
		name: "screen_fade_steps",
		formula: "ceil(255.0/_screen_fade_delta())",
	},















	#CFL - ComeFrom Language. A stupid, stupid endevour.
	{
		args: "stack",
		name: "cfl_flip_stack",
		formula: "if(head(stack), cfl_flip_stack(tail(stack))+[head(stack)], stack)",
	},
	{
		args: "code, on_line, data_stack, operand_stack, comefroms",
		name: "cfl_",
		formula: "
			if(head(operand_stack) and (not head(operand_stack).count), //START complete command
				cfl_(
					command['code'] or code,
					on_line,
					command.out + data_stack[head(operand_stack).total:size(data_stack)],
					if(nos, 
						[head(nos) + {count: head(nos).count - size(command.out)}] + tail(nos),
						[]
						) where nos = tail(operand_stack),
					command.cf or comefroms,
					) where command = switch(head(operand_stack).op,
							'+',			{out: [data_stack[1] + if(is_string(data_stack[1]), ' ', 0) + data_stack[0]]},
							'-',			{out: [data_stack[1] - data_stack[0]]},
							'(',			{out: [head(data_stack)]},
							'print',		debug_fn(str(head(data_stack)), {}),
							'<',			{out: [data_stack[1] < data_stack[0]]},
							'>',			{out: [data_stack[1] > data_stack[0]]},
							'=',			{out: [data_stack[1] = data_stack[0]]},
							'dup',			{out: [head(data_stack)]},
							'drop',			{},
							'comefrom',		{}, //Comefroms are computed by the compiler.
							'comefromif',	{},
							debug_fn('Error, ${head(operand_stack).op} not an operator.', {})
							),
				if(on_line > max(keys(code)), //START read next datum
					cfl_flip_stack(data_stack), //Return value.
					if(code[on_line] = null,
						cfl_(	//Advance over no entry.
							code, 
							comefroms.comefrom[on_line] or (head(data_stack) and comefroms.comefromif[on_line]) or on_line+1, 
							data_stack, 
							operand_stack, 
							comefroms),
						(/*debug_fn('Evaluating ${on_line}: ${code[on_line]}\ndata:${data_stack}\nops:${operand_stack}',
						*/	cfl_( //Advance one statement.
								line['code'] or code,
								comefroms.comefrom[on_line] or (if(line.data != null, line.data, head(data_stack)) and comefroms.comefromif[on_line]) or on_line+1, 
								line.data + data_stack,
								if(nos, 
									[head(nos) + {count: head(nos).count - size(line.data)}] + tail(nos),
									[]
									) where nos = line.operator + operand_stack,
								comefroms + line.comefrom
							)
						where line = switch(code[on_line],
							'+', 			ato,
							'-', 			ato,
							'(',			addop(code[on_line], 2, 1),
							'print',		addop(code[on_line], 1, 1),
							'<',			ato,
							'>',			ato,
							'=',			ato,
							'dup',			addop(code[on_line], 0, 0),
							'drop',			addop(code[on_line], 0, 1),
							'comefrom',		addop(code[on_line], 1, 1),
							'comefromif',	addop(code[on_line], 1, 1),
							{data: [code[on_line]]} //Not an operator, must be data.
						) where ato = addop(code[on_line]) //Add This Op
						where addop = def(o, c=1, t=2) {operator: [{op:o, count:c, total:t}]} //By default, we require one ahead and two total. This means we swallow one value from the stack previous to the command, and we require one value after the command.
						)
					)
				)
			)",
	},
	{
		args: "code",
		name: "cfl_remove_lchar",
		formula: "regex_match(code, '.(.*)')[0]",
	},
	{
		args: "code",
		name: "cfl_compile",
		formula: "
			eval('{'+ sum(map(range(size(pairs)/2), 
				pairs[value*2] + ':' + if(strstr(pairs[value*2+1], '#'), cfl_remove_lchar(pairs[value*2+1]), q(')+pairs[value*2+1]+q(')) + ','
				) where pairs = filter(split(code, ' '), value), '') + '}')",
	},
	{
		args: "comp_code, current_line",
		name: "cfl_get_next_value",
		formula: "map(comp_code, value)[index(map(comp_code, key), current_line)+1]",
	},
	{
		args: "comp_code",
		name: "cfl_extract_comefroms",
		formula: "fold(map(['comefrom', 'comefromif'], 'cftype', {(cftype): fold(map(filter(comp_code, value = cftype), {(cfl_get_next_value(comp_code, key)):key}), a+b)}), a+b)",
	},
	{
		args: "code",
		name: "cfl",
		formula: "cfl_(program, 0, [], [], comefroms)
			where comefroms = cfl_extract_comefroms(program),
			where program = cfl_compile(code)",
	},

	/*
	Docs:
		+			Add the previous datum and the next datum.
		-			Subtract same.
		(			Interpret the next two results, and anything they might interpret.
		print		Prints the next datum.
		< = >		Comparison between the previous and next data.
		dup			Duplicate the first value in the stack
		drop		Drop the first value in the stack
		comefrom	Come from a line number, the line number being the number supplied on the next line.
		comefromif	Come from a line number, if the most recent value in the stack is 'true'.
	Examples: Print "Hello, world.":
	cfl('
		 10 print 11 (
		 20 Hello 30 + 40 world. 
		')
	cfl('10 print 11 ( 12 ( 20 #4 30 + 40 #5 41 - 42 #2')
	cfl('
		 10 #5
		 20 #3
		 30 +
		 40 +
		 50 #4
	')
	cfl('1 #10 2 < 3 #2')
	cfl('10 a 20 dup')
	cfl('
		 10 #0
		 20 comefrom
		 25 #120
		 30 +
		 40 #1
		 50 dup
		 55 dup
		 60 <
		 70 #10
		 80 drop
		 100 comefromif
		 110 #75
		 120 drop
		 130 comefrom
		 140 #90
		 145 drop	
	')
	cfl('10 #0')
	*/
]
