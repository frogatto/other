{#This prototype grants the object carrying it the findPath function. Note that this isn't cached, because it'll be invalidated when we rotate the game.
id: "ct-pather",
properties: {
	on_block: "def(location) transform(location, round(v))",
	
	queryGroupMap: "def(loc_in) if(not find(loc, 'coord', coord < 0) or find(list_subtract(level.player.vars.groupMap['size'], loc), 'coord', coord < 0),
		level.player.vars.groupMap['objs'][loc[0]][loc[1]][loc[2]], 
		[]
		) where loc = list_add(level.player.vars.groupMap['offset'], loc_in)",
	
	getTargets: "def(nowAt, lookingFor, exclude=[]) #nowAt: The location to start the search from. Used for proximity. (not implimented yet) lookingFor is a list of services to search the utils for. First service to match wins, so order matters. Optional 'exclude', a list of locations to exclude from the search.#
		flatten(
			map(lookingFor, 'service', 
				filter(level.player.vars.ped_utils, 'util', service in transform(util.services, v.id) and (not util.vars.location in exclude)) 
			)
		)",
	calculatePath: "def(to, from=0) #Returns a path to to from optional from.#
		rough
		where rough = _calculatePathRough(on_block(to), on_block(if(from, from, self.vars.location)), [from])",
	calculatePathRough: "def(to, from)  _calculatePathRough(on_block(to), on_block(if(from, from, self.vars.location)), [from])",
	_calculatePathRough: "def(to, from, tested) #To and from must be whole number coordinates, x/y/z. Tested is a list of lists of coords.#
		if(to = from,
			{'tiles':[from], 'complete':1, },
			map_merge({'tiles':[from]}, _findGood(to, goodLocs, tested + goodLocs))
			where goodLocs = filter(newLocs, 'newLoc', 
				'ground' in underNewLoc and (not 'ground' in atNewLoc or 'bounds' in atNewLoc or _edge_entering(newLoc, from) in atNewLoc) and (not _edge_leaving(newLoc, from) in atOldLoc)
				where atOldLoc = queryGroupMap(from)
				where atNewLoc = queryGroupMap(newLoc)
				where underNewLoc = queryGroupMap(list_add([0,0,-1], newLoc)) #hehehe#
				)
			where newLocs = sort(
				filter(
					transform([[-1,0,0],[1,0,0],[0,-1,0],[0,1,0]], list_add(from, v)),
					'newLoc', not newLoc in tested), 
				length(a[0], a[1], to[0], to[1]) < length(b[0], b[1], to[0], to[1]))
			)
		",
	_findGood: "def(to, froms, tested) 
		if(size(froms),
			if(call.complete, call, _findGood(to, froms[1:], tested))
			where call = _calculatePathRough(to, froms[0], tested),
			{}
		)",
	_edge_leaving: "def(to, from) 
		switch(delta,
			[-1,0,0], 'edge 1',
			[0,1,0], 'edge 3',
			[0,-1,0], 'edge 7',
			[1,0,0], 'edge 9')
		where delta = list_subtract(to, from)",
	_edge_entering: "def(to, from) 
		switch(delta,
			[-1,0,0], 'edge 9',
			[0,1,0], 'edge 7',
			[0,-1,0], 'edge 3',
			[1,0,0], 'edge 1')
		where delta = list_subtract(to, from)",
	},
}