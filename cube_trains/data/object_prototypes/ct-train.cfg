{
id: "ct-train",
always_active: true,
prototype: ["ct-falloff-sound-source"],

properties: {
	set_zrot: "def(rot) [animation(vars.baseAnimation + '-' + str(integer(rot/10.0))), set(vars.oldRot, rot)]",
},

vars: {
	group: ["train"],
	baseAnimation: "engine",
	yOffset: -15,
	angleOffset: 140,
	on_track: null,
	speed: 6,
	track: 0,
	reversed: 0,
	offset: 0,
	counted: false,
	number: 0, //How far back we are from the engine. 0 means we are the engine.
	prev_px: null, //The previous pixel value we were on.
	z_track: 0,
	
	sound_file: "TrainRunLooped.wav",
	sound_volume_scale: {min: 0.25, max:0.95}
},

consts: {
	nosave: 1,
	},
	
on_first_cycle: "[fire_event('solve'), fire_event('advance')]",

on_solve: "if(not solved.error, [
		set(midpoint_x, solved.pos[0]),
		set(midpoint_y, solved.pos[1] + vars.yOffset),
		set(vars.on_track, solvedLess.obj),
		set(vars.offset, solvedLess.pixels),
		set(vars.prev_px, solvedLess.pixels),
		set(vars.track, solvedLess.track),
		set(vars.reversed, solvedLess.reversed),
		if(not self.vars.lockrot,
			set_zrot(
				if(constrain(-360, rawAngle, 360) = rawAngle, 
					if(rawAngle < 0, 
						360+rawAngle, 
						rawAngle), 
					vars.oldRot
				)	where rawAngle = if(solvedMore.error or solvedLess.error,
						angle(midpoint_x, midpoint_y*1.75, solved.pos[0], (solved.pos[1] + vars.yOffset)*1.75) + angleOffset,
						angle(solvedLess.pos[0], solvedLess.pos[1]*1.75, solvedMore.pos[0], solvedMore.pos[1]*1.75) + angleOffset
						)
				),
			set_zrot(self.vars.lockrot)
			),
		if(vars.on_track != solvedLess.obj, [
			fire_event(vars.on_track, 'train_exit', self),
			fire_event(solvedLess.obj, 'train_enter', self),
			fire_event(vars.on_track, 'train_exit2', self), //Deals with win conditions.
			fire_event(solvedLess.obj, 'train_enter2', self), //Unlike train_enter, this should never be overridden.
			if((not self.vars.counted) and 0=number and solvedLess.obj.vars.train_on, [
				if(self.vars.target_branch = solvedLess.obj.vars.train_on.vars.target_branch,
					[	//Success, branch complete.
						fire_event(level.player, 'train_right_branch', {'a': self, 'b': solvedLess.obj.vars.train_on}),
						set(self.vars.done, true),
						set(solvedLess.obj.vars.train_on.vars.done, true),
					],[	//Failure, trains came from different places.
						fire_event(level.player, 'train_wrong_branch', {'a': self, 'b': solvedLess.obj.vars.train_on}),
					]),
				map([self, solvedLess.obj.vars.train_on], [
					set(value.vars.counted, true),
					])
				]),
			],
			if(ppxpx[0] < HalfLength and HalfLength <= ppxpx[1], //Inner 39/17 turns leading to entrances don't fire this soon enough and it clips. To fix, perhaps move to solved instead of solvedLess? Note condition.
				fire_event(solvedLess.obj, 'train_midway', self)
				) where ppxpx = sort([prev_px, solvedLess.pixels])
				where HalfLength = solvedLess.obj.consts.track_points[str(solvedLess.obj.vars.tracks[0])].length[solvedLess.track]/2
			)
		],[
		fire_event(vars.on_track, 'train_exit', self),
		fire_event(vars.on_track, 'train_exit2', self),
		fire_event(vars.on_track, 'train_crash', self),
		if(0=number,
			fire_event(level.player, 'train_crashed', {'error': solved.error, 'a': self})),
		fire_event(self, 'die'),
		remove_object(self),
		]) where solved = vars.on_track.solve(vars.offset+vars.speed+10,vars.track,vars.reversed),
		where solvedLess = vars.on_track.solve(vars.offset+vars.speed,vars.track,vars.reversed),
		where solvedMore = vars.on_track.solve(vars.offset+vars.speed+20,vars.track,vars.reversed)",

on_advance: "[fire_event('solve'), schedule(2, fire_event('advance'))]",

//on_process: "if(number=0, debug(z))",
}