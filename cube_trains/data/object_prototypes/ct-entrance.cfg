{
id: "ct-entrance",
prototype: ["ct-track"],
zsub_order: 0,
properties: {
	set_branch: "def(val) [
			set(me.vars.branch, val),
			if(val in available_animations, set(me.animation, val) #,debug('Error: ct-track missing colour data for this branch.')#),
			]",
			
	message: "#(x%y+y)%y#
		'Arrival Frequency: ${vars.save_val[0]}/10s' + if(sve = 0, ' ${selector}', '') + '(disabled)\n  ' + 
			if(vars.save_val[0] != 0, '(One every ${500/vars.save_val[0]} frames.)', '(Only recieves trains.)') + '\n' +
		'Phase Offset: ${save_val[1]}/100' + if(sve = 1, ' ${selector}', '') + '(disabled)\n' + 
		'Train Length: ${save_val[2]} cars' + if(sve = 2, ' ${selector}', '') + '(disabled)\n' + 
		('Tracks: ${opt[save_val[3][0]]}, ${opt[0=save_val[3][1]]}' where opt = ['Producer', 'Consumer']) + if(sve = 3, ' ${selector}', '')# + '\n' +
		'Reversed: ${save_val[4]}' + if(sve = 4, ' ${selector}', '') + '(also disabled)'#
		where selector = 'Ð¤' 
		where sve = vars.save_val_edit",
		
	change_save_val: "def(val) switch(vars.save_val_edit, 
		0, set(vars.save_val, list_replace_elements(vars.save_val, 0, [max(vars.save_val[0]+val, 0)])),
		1, set(vars.save_val, list_replace_elements(vars.save_val, 1, [((vars.save_val[1]+val*10)%100+100)%100])),
		2, set(vars.save_val, list_replace_elements(vars.save_val, 2, [max(vars.save_val[2]+val, 0)])),
		3, set(vars.save_val, list_replace_elements(vars.save_val, 3, [if(not vars.save_val[3][0], [1, vars.save_val[3][1]], [0=vars.save_val[3][0], 0=vars.save_val[3][1]])])),
		4, set(vars.save_val, list_replace_elements(vars.save_val, 4, [not vars.save_val[4]])),
		debug('change_save_val error in ${self.type}. Index ${vars.save_val_edit} is not registered.'))",
		
		
	additionalPlacementRequirementsMet: "def(chars) 
		if(not fold(map(chars_to_check, '${self.type}.${value}' in chars_at_coord), a and b)
				where chars_at_coord = transform(potentially_at_coord(self.vars.location, chars), v.type) 
				where chars_to_check = ['track', 'middle', 'cap'],
			{'error' -> 'Could not place train track here.'},
			{'ok' -> 1})",
			
	additionalBlocks: "def(chars) [
		{'id' -> '${self.type}.track', 'pos' -> [0,0,0]},
		{'id' -> '${self.type}.middle', 'pos' -> [0,0,0]},
		{'id' -> '${self.type}.cap', 'pos' -> [0,0,0]},
		]",
		
	render_offset: "def(vm) 0.5",
},

vars: {
	zoffset: 1,
	
	group: ["ground","track","brace","ground shadow"],
	track: 0,
	frequency: 20,
	save_val: [5,0,4,[0,0]],

	#arrival freq 5, no offset, 4 cars/train.
	save_val_edit: 0,
	spawning: 0,
	editable: 0,
},

consts: {
	is_entrance: true,
},

on_first_cycle: "add(level.player.vars.entrances, [self])",
on_remove: "[set(level.player.vars.entrances, filter(level.player.vars.entrances, 'lpve', lpve != context.self)), remove_object(self)]",

on_start_spawn: "map(trains, 'train', [
	set(train.vars.target_branch, self.vars.branch),
	set(train.on_track, self),
	set(train.came_from, self),
	set(train.track, if(self.vars.spawn_track, 1, 0)), #boolean, must be filtered like this, don't know why#
	set(train.number, index),
	set(train.sound_enabled, index=0),
	add_object(train),
	fire_event(self, 'train_enter', train),
	]) where trains = [
		object('ct-train-simple-cargo', self.x, self.y, 0, {'offset' ->  50, 'baseAnimation' -> 'engine'}),
		object('ct-train-simple-cargo', self.x, self.y, 0, {'offset' ->  30, 'baseAnimation' -> choose(['box1', 'box2', 'flat'])}),
		object('ct-train-simple-cargo', self.x, self.y, 0, {'offset' ->  10, 'baseAnimation' -> choose(['box1', 'box2', 'flat'])}),
		object('ct-train-simple-cargo', self.x, self.y, 0, {'offset' -> -10, 'baseAnimation' -> choose(['box1', 'box2', 'flat'])}),
		]",

on_train_enter: "
	if(arg.vars.track, [
			set(arg.z_track, 10),
			set(arg.z, self.z+20),
		],[
			set(arg.z_track, 30),
			set(arg.z, self.z+40),
		])", //sets the train to be on top of the current track, and the track below it to avoid tips issues.	
	
on_stop_spawn: "[
	set(spawning, 0),
	]",

on_tspawn: "if(spawning, [
	schedule(500/vars.save_val[0], fire_event('tspawn')),
	])",
	

on_reset_zoffset: "setToGrid(location)",

on_ctrl_select: "set(save_val_edit, (save_val_edit+1)%size(save_val))",
}