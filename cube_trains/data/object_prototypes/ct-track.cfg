{
id: "ct-track",
prototype: ["ct-block"],
zsub_order: 1,
properties: {
	set_branch: "def(val) null",
	additionalPlacementRequirementsMet: "def(chars) if('support' in groups, {'ok' -> 1}, {'ok' -> 0, 'error' -> 'There was nothing suitable on which to build this section of track.'}) where groups = groups_at(list_add(location, [0,0,-1]), chars)",
	additionalBlocks: "def(chars)
			if(location[2] > level.player.limits.min[2]
			and (not ('ground' in groups or 'support' in groups) where groups = groups_at(list_add(location, [0,0,-1]), chars)),
				[{'id' -> 'ct-legs-5', 'pos' -> [ 0, 0, -1]}],
				[])",

	# -- Track-specific functions. -- 
	#
	#How many pixels traveled (0 to whatever), what track we're on (1-2), and what track object is next.
	#Returns x/y position, the track object now on (we might travel through this one and on to the next), and the track side we're on (0 or 1).
	#track_ends[track][1]+pixels-track_length[track]-1 returns distance not traveled.
	#A note on the numbering scheme, 5 is the vertical number, and goes first only if it's below the other number. Otherwise, little numbers go to big numbers.
	#the four corner tracks
	solve13: "def(pixels, track, next) SolveToPoint(13, coordinates_from_data, pixels, track, next)",
	solve17: "def(pixels, track, next) SolveToPoint(17, coordinates_from_data, pixels, track, next)",
	solve39: "def(pixels, track, next) SolveToPoint(39, coordinates_from_data, pixels, track, next)",
	solve79: "def(pixels, track, next) SolveToPoint(79, coordinates_from_data, pixels, track, next)",

	#the four raise tracks' lower halfs
	solve15: "def(pixels, track, next) SolveToPoint(15, coordinates_from_data, pixels, track, next)",
	solve35: "def(pixels, track, next) SolveToPoint(35, coordinates_from_data, pixels, track, next)",
	solve75: "def(pixels, track, next) SolveToPoint(75, coordinates_from_data, pixels, track, next)",
	solve95: "def(pixels, track, next) SolveToPoint(95, coordinates_from_data, pixels, track, next)",

	#the four raise tracks' upper halfs
	solve51: "def(pixels, track, next) SolveToPoint(51, coordinates_from_data, pixels, track, next)",
	solve53: "def(pixels, track, next) SolveToPoint(53, coordinates_from_data, pixels, track, next)",
	solve57: "def(pixels, track, next) SolveToPoint(57, coordinates_from_data, pixels, track, next)",
	solve59: "def(pixels, track, next) SolveToPoint(59, coordinates_from_data, pixels, track, next)",

	#the two straight tracks
	solve19: "def(pixels, track, next) SolveToPoint(19, coordinates_from_formula, pixels, track, next)",
	solve37: "def(pixels, track, next) SolveToPoint(37, coordinates_from_formula, pixels, track, next)",
	SolveToPoint: "def(key, solver, pointsIn, track, next)			#Key for data in track_points. Solver is what function we should use to get the x,y datapoint for to return.#
			if(pointsIn <= maxPixIn, {								#PointsIn is how many points we are into the track. This is normalised to 100 points to fully cross a straight piece of track. Curves will have different lengths.#
				'pos' -> solver(key, pointsIn, track, track=next), 	#Track is, basically, are we on the 0th track or the 1st track? Next is the direction we are going on the track.#
				'pixels' -> pointsIn, 
				'track' -> track, 
				'reversed' -> next,
				'obj' -> self},
				if(toEnter, 
					if(not match_track['error'],
						toEnter.solve(
							pointsIn - maxPixIn,
							match_track['track'],
							match_track['reversed']
							),
							match_track
						) where match_track = plugs_in(key, toEnter.vars.tracks[#!#0], track, track=next), #this'll need to be mapped for switch tracks#
					{'error' -> 'End of tracks.'}
				) where toEnter = find(get(consts.track_points[str(key)]['next'][track=next]), 'obj', 'track' in obj.vars.group))
			where maxPixIn = consts.track_points[str(key)]['length'][track]",
	coordinates_from_data: "def(key, pixels_, side, reversed)  #'key' in track points. 0 <= 'pixels' <= 100. 'side' and 'reversed' are boolean.#
			list_add([self.x, self.y],
				list_single_divide(
					list_add(consts.track_points[str(key)]['offset'],
						list_multiply(consts.track_points[str(key)]['scale'],
							list_multiply(
								consts.track_points[str(consts.track_points[str(key)]['points'])][side][pointsIndex],
								[consts.track_points[str(key)]['facing'],consts.track_points[str(key)]['upside down']]
								)
							)
						),
					2)
				) where pointsIndex = percentThrough*(dataLength-sum(clip)) + clip[0]
				where dataLength = size(consts.track_points[str(consts.track_points[str(key)]['points'])][side])-1
				where percentThrough = decimal(pixels) / consts.track_points[str(key)]['length'][side]
				where clip = consts.track_points[str(key)]['clip'][side]
				where pixels = if(reversed, consts.track_points[str(key)]['length'][side]-pixels_, pixels_)",
	coordinates_from_formula: "def(key, pixels, side, reversed) #See previous function.#
			list_add([self.x, self.y], 
				list_single_divide(
					list_tween(
						consts.track_points[str(key)][str(side)][if(reversed, 'far end', 'near end')],
						consts.track_points[str(key)][str(side)][if(reversed, 'near end', 'far end')],
						pixels/100.0),
					2))",
	get: "def(num) at_coord(list_add(switch(num,		#returns the coordinates of the object in 'num' direction from us. See your numpad for reference.#
			'1', [-1,0,0],	'3', [0,1,0],	'7', [0,-1,0],	'9', [1,0,0],	'5', [0,0,1],	'-5', [0,0,-1],
			 1,  [-1,0,0],	 3,  [0,1,0],	 7,  [0,-1,0],	 9,  [1,0,0],	 5,  [0,0,1],	 -5,  [0,0,-1]
			), vars.location))",
	plugs_in: "def(keyA, keyB, track, reversed) 
			if(1 in  code[0] or 1 in code[1],
				{'track' -> 1 in code[1], 'reversed' -> 1 in [code[0][1], code[1][0]]}, #This decides which track/direction we need to enter the new track on. If you take an oval, something like trick 19 will be used twice - and the trains will need to go in both directions.#
				{'error' -> 'No matching track.'}
			) where code = map(consts.track_matches[str(keyB)], 'track_match_group', 
				map(track_match_group, 'track_match_group_component',
					track_match_group_component = mirrored)
				)	where mirrored = consts.match_mirrors[str(consts.track_matches[str(keyA)][track][reversed])]",
},

# 		connected = "map(filter(list_str(st) where st = self.type, 'chr', chr in ['1','3','5','7','9']), 'dir', get(dir))"
# 		
# 		does_match = "def(male, female, direction) [0=matches_direction,  if(matches_reverse, 1, 0)]
# 			where matches_reverse = self.consts.match_mirrors[self.consts.track_matches[male_pref][direction][1]] in self.consts.track_matches[female_pref][0=direction]
# 			where matches_direction = self.consts.match_mirrors[self.consts.track_matches[male_pref][direction][1]] in self.consts.track_matches[female_pref][direction]
# 			where male_pref   = join(filter(list_str(ml) where ml =   male.type, 'chr', chr in ['1','3','5','7','9']))
# 			where female_pref = join(filter(list_str(fm) where fm = female.type, 'chr', chr in ['1','3','5','7','9']))"
# 					[[1,0],[0,0]], {'track'->0, 'reversed'->0},
# 					[[0,1],[0,0]], {'track'->0, 'reversed'->1},
# 					[[0,0],[1,0]], {'track'->1, 'reversed'->1},
# 					[[0,0],[0,1]], {'track'->1, 'reversed'->0},

vars: {
	editable: 1,
	train_on: false,
	zoffset: 2,
},
consts: {
	track_points: {
		"13": { "clip": [ [ 2, 2 ], [ 5, 3 ] ], "facing": -1, "length": [ 131, 62 ], "next": [ 1, 3 ], "offset": [ 258, 410 ], "points": "curve_flat", "scale": [ 1.305, 1.305 ], "upside down": -1 },
		"15": { "clip": [ [ 35, 2 ], [ 35, 2 ] ], "facing": -1, "length": [ 74, 74 ], "next": [ 1, 5 ], "offset": [ 272, 279 ], "points": "raise_far", "scale": [ 1.28, 1.28 ], "upside down": 1 },
		"17": { "clip": [ [ 10, 1 ], [ 3, 1 ] ], "facing": 1, "length": [ 62, 131 ], "next": [ 1, 7 ], "offset": [ 200, 380 ], "points": "curve_side", "scale": [ 1.305, 1.305 ], "upside down": 1 },
		"19": { "0": { "far end": [ 407, 339 ], "near end": [ 191, 462 ] }, "1": { "far end": [ 329, 296 ], "near end": [ 113, 420 ] }, "length": [ 100, 100 ], "next": [ 1, 9 ] },
		"35": { "clip": [ [ 35, 1 ], [ 35, 1 ] ], "facing": 1, "length": [ 75, 75 ], "next": [ 3, 5 ], "offset": [ 245, 278 ], "points": "raise_far", "scale": [ 1.28, 1.28 ], "upside down": 1 },
		"37": { "0": { "far end": [ 330, 465 ], "near end": [ 113, 340 ] }, "1": { "far end": [ 404, 420 ], "near end": [ 188, 296 ] }, "length": [ 100, 100 ], "next": [ 7, 3 ] },
		"39": { "clip": [ [ 9, 0 ], [ 3, 1 ] ], "facing": -1, "length": [ 62, 131 ], "next": [ 9, 3 ], "offset": [ 316, 382 ], "points": "curve_side", "scale": [ 1.305, 1.305 ], "upside down": -1 },
		"51": { "clip": [ [ 0, 66 ], [ 0, 66 ] ], "facing": 1, "length": [ 45, 45 ], "next": [ -5, 1 ], "offset": [ 58, 298 ], "points": "raise_near", "scale": [ 1.28, 1.28 ], "upside down": 1 },
		"53": { "clip": [ [ 0, 66 ], [ 0, 66 ] ], "facing": -1, "length": [ 45, 45 ], "next": [ -5, 3 ], "offset": [ 458, 298 ], "points": "raise_near", "scale": [ 1.28, 1.28 ], "upside down": 1 },
		"57": { "clip": [ [ 0, 65 ], [ 0, 65 ] ], "facing": 1, "length": [ 45, 45 ], "next": [ -5, 7 ], "offset": [ 245, 404 ], "points": "raise_far", "scale": [ 1.28, 1.28 ], "upside down": 1 },
		"59": { "clip": [ [ 0, 65 ], [ 0, 65 ] ], "facing": -1, "length": [ 45, 45 ], "next": [ -5, 9 ], "offset": [ 272, 406 ], "points": "raise_far", "scale": [ 1.28, 1.28 ], "upside down": 1 },
		"75": { "clip": [ [ 37, 2 ], [ 37, 2 ] ], "facing": -1, "length": [ 74, 74 ], "next": [ 7, 5 ], "offset": [ 457, 172 ], "points": "raise_near", "scale": [ 1.28, 1.28 ], "upside down": 1 },
		"79": { "clip": [ [ 2, 0 ], [ 5, 0 ] ], "facing": 1, "length": [ 131, 62 ], "next": [ 9, 7 ], "offset": [ 258, 351 ], "points": "curve_flat", "scale": [ 1.305, 1.305 ], "upside down": 1 },
		"95": { "clip": [ [ 37, 2 ], [ 37, 2 ] ], "facing": 1, "length": [ 74, 74 ], "next": [ 9, 5 ], "offset": [ 57, 172 ], "points": "raise_near", "scale": [ 1.28, 1.28 ], "upside down": 1 },
		"curve_flat": [ [ [ -114.000021, -12.000002 ], [ -112.000214, -11.0 ], [ -110.000021, -9.000002 ], [ -107.000021, -8.000021 ], [ -105.000021, -7.000002 ], [ -103.000021, -5.000002 ], [ -101.018, -4.000002 ], [ -98.000021, -3.0 ], [ -96.000021, -2.000002 ], [ -94.000021, -1.000002 ], [ -91.000021, 0.0 ], [ -89.000021, 0.0 ], [ -87.000021, 1.0 ], [ -84.000021, 2.0 ], [ -82.000021, 3.0 ], [ -80.000021, 4.000002 ], [ -77.000021, 5.000002 ], [ -75.000021, 6.000002 ], [ -73.000021, 7.000021 ], [ -70.000021, 8.000002 ], [ -68.000021, 9.000021 ], [ -66.000214, 10.000002 ], [ -63.000021, 10.000021 ], [ -61.000002, 11.000021 ], [ -59.000002, 12.000002 ], [ -56.000002, 13.0 ], [ -54.000021, 13.000002 ], [ -52.000002, 14.000002 ], [ -49.000021, 14.000021 ], [ -47.000021, 15.000021 ], [ -45.05, 16.000021 ], [ -42.000021, 16.000021 ], [ -40.000002, 17.000021 ], [ -37.000002, 17.000002 ], [ -35.000021, 18.0 ], [ -33.000021, 18.000002 ], [ -30.000021, 18.000002 ], [ -28.000002, 19.000002 ], [ -26.000002, 19.000002 ], [ -23.000002, 19.000002 ], [ -21.000021, 20.000002 ], [ -19.000002, 20.000021 ], [ -16.000002, 20.000002 ], [ -14.000002, 20.000002 ], [ -12.012759, 21.0 ], [ -9.000002, 21.000002 ], [ -7.000002, 21.000002 ], [ -4.000002, 21.000021 ], [ -2.000002, 21.000002 ], [ 0.0, 21.000002 ], [ 2.0, 21.000002 ], [ 4.0, 21.000214 ], [ 6.000002, 21.000002 ], [ 9.000021, 21.000021 ], [ 11.000002, 21.000021 ], [ 13.000002, 21.000002 ], [ 16.000002, 21.000002 ], [ 18.000002, 21.03 ], [ 20.000002, 20.000002 ], [ 23.000021, 20.000002 ], [ 25.000002, 20.000214 ], [ 27.000002, 20.000021 ], [ 30.000002, 19.000214 ], [ 32.000021, 19.000002 ], [ 34.000021, 19.000021 ], [ 37.000021, 18.000002 ], [ 39.000021, 18.000002 ], [ 41.000021, 17.000021 ], [ 44.000021, 17.000021 ], [ 46.000002, 17.0408 ], [ 48.000002, 16.000002 ], [ 51.000021, 16.03 ], [ 53.000021, 15.000021 ], [ 55.000021, 14.000002 ], [ 58.000021, 14.000002 ], [ 60.000021, 13.000002 ], [ 62.000021, 13.011631 ], [ 65.030539, 12.000002 ], [ 67.000214, 11.000002 ], [ 69.000021, 10.000002 ], [ 71.000021, 10.000002 ], [ 74.000021, 9.000002 ], [ 76.000021, 8.000002 ], [ 78.000021, 7.000002 ], [ 81.04, 6.0 ], [ 83.000021, 5.000002 ], [ 85.000021, 5.0 ], [ 87.000021, 4.000002 ], [ 90.0, 3.000002 ], [ 92.000021, 2.0 ], [ 94.002147, 1.0 ], [ 96.000021, 0.0 ], [ 99.01635, 0.0 ], [ 101.000021, -1.000002 ], [ 103.000021, -3.0 ], [ 105.000021, -4.000002 ], [ 107.000021, -5.000002 ], [ 110.000021, -6.000002 ], [ 112.000214, -7.000002 ], [ 114.000214, -8.000002 ], [ 116.000214, -10.000021 ], [ 118.000021, -11.000002 ] ], [ [ -57.000021, -46.000021 ], [ -56.000002, -46.000002 ], [ -56.0415, -45.000021 ], [ -55.000021, -44.000002 ], [ -54.000002, -44.000021 ], [ -53.000021, -43.000021 ], [ -52.000021, -42.000002 ], [ -51.000002, -42.000002 ], [ -50.000021, -41.000021 ], [ -49.000021, -41.000021 ], [ -48.000021, -40.000021 ], [ -47.000021, -40.0 ], [ -46.000021, -39.000002 ], [ -45.000021, -39.009043 ], [ -44.02971, -38.000021 ], [ -42.000002, -38.01675 ], [ -41.000002, -37.000021 ], [ -40.000021, -37.06 ], [ -39.000021, -36.000002 ], [ -38.000002, -36.000021 ], [ -37.000021, -35.000021 ], [ -36.000021, -35.000021 ], [ -35.000021, -34.000021 ], [ -34.023488, -34.000021 ], [ -32.000021, -34.0 ], [ -31.000021, -33.000021 ], [ -30.000021, -33.000002 ], [ -29.000021, -32.000002 ], [ -28.000021, -32.000021 ], [ -27.02305, -32.000021 ], [ -25.000021, -32.001169 ], [ -24.000002, -31.000002 ], [ -23.000021, -31.000002 ], [ -22.000002, -31.000002 ], [ -21.004, -30.000002 ], [ -19.000002, -30.000021 ], [ -18.000214, -30.000002 ], [ -17.000021, -30.000002 ], [ -16.000021, -29.000002 ], [ -14.000002, -29.000002 ], [ -13.000002, -29.000021 ], [ -12.000002, -29.000002 ], [ -11.0483, -29.000021 ], [ -9.000002, -29.000214 ], [ -8.000021, -29.025 ], [ -7.000002, -28.000021 ], [ -6.002108, -28.000002 ], [ -4.000002, -28.000002 ], [ -3.000002, -28.000002 ], [ -2.000002, -28.000002 ], [ 0.0, -28.000021 ], [ 0.000002, -28.000002 ], [ 1.0, -28.000021 ], [ 2.0, -28.000214 ], [ 4.000021, -28.000002 ], [ 5.000002, -28.000002 ], [ 6.000002, -28.000021 ], [ 8.017934, -28.000002 ], [ 9.000002, -28.000021 ], [ 10.000002, -28.000021 ], [ 11.000021, -29.011667 ], [ 13.000002, -29.000002 ], [ 14.000021, -29.000002 ], [ 15.000002, -29.000021 ], [ 17.010591, -29.000021 ], [ 18.000021, -29.000002 ], [ 19.000214, -30.01838 ], [ 20.000002, -30.000002 ], [ 22.000021, -30.000021 ], [ 23.000002, -30.000002 ], [ 24.000002, -31.015 ], [ 25.000021, -31.000002 ], [ 27.000021, -31.000021 ], [ 28.000002, -31.000021 ], [ 29.000021, -32.000021 ], [ 30.000002, -32.000214 ], [ 32.000021, -32.000021 ], [ 33.000021, -33.000021 ], [ 34.000002, -33.000021 ], [ 35.000002, -34.000214 ], [ 37.0, -34.000021 ], [ 38.000021, -35.024163 ], [ 39.000002, -35.000021 ], [ 40.000021, -36.02 ], [ 41.000002, -36.000002 ], [ 43.000021, -37.017891 ], [ 44.000021, -37.000021 ], [ 45.000021, -38.000021 ], [ 46.000002, -38.000021 ], [ 47.000021, -39.000021 ], [ 48.000021, -39.000021 ], [ 50.000002, -40.000021 ], [ 51.000021, -41.000002 ], [ 52.000214, -41.000021 ], [ 53.000021, -42.000002 ], [ 54.000021, -43.000021 ], [ 55.000002, -43.000002 ], [ 56.000021, -44.000002 ], [ 57.000021, -45.000002 ], [ 58.000214, -46.000021 ], [ 60.052, -46.000021 ], [ 61.000214, -47.000002 ] ] ],
		"curve_side": [ [ [ -79.000021, -35.000021 ], [ -78.000021, -35.000002 ], [ -76.000021, -34.000002 ], [ -75.000021, -34.000021 ], [ -74.000021, -33.000021 ], [ -73.000021, -32.000021 ], [ -72.000021, -32.000021 ], [ -71.020941, -31.000002 ], [ -69.000021, -31.0301 ], [ -68.000021, -30.000214 ], [ -67.000021, -29.000002 ], [ -66.000021, -29.000002 ], [ -65.000021, -28.000021 ], [ -64.000021, -27.000002 ], [ -63.000021, -27.000021 ], [ -63.004123, -26.000021 ], [ -62.000021, -25.000002 ], [ -61.000021, -25.000002 ], [ -60.000021, -24.000002 ], [ -59.000002, -23.000021 ], [ -58.000002, -23.000002 ], [ -58.001634, -22.000002 ], [ -57.000002, -21.000021 ], [ -56.000021, -21.002147 ], [ -55.000021, -20.000002 ], [ -55.000021, -19.000002 ], [ -54.000021, -19.01599 ], [ -53.000002, -18.000002 ], [ -53.000021, -17.000002 ], [ -52.000021, -16.000002 ], [ -52.000002, -16.000021 ], [ -51.000021, -15.000002 ], [ -51.000021, -14.000002 ], [ -50.000021, -14.01 ], [ -50.000021, -13.000002 ], [ -49.000021, -12.000002 ], [ -49.000021, -11.000002 ], [ -48.000214, -11.0 ], [ -48.000002, -10.000021 ], [ -48.000214, -9.000002 ], [ -47.000214, -8.000002 ], [ -47.000021, -8.000002 ], [ -47.000021, -7.000002 ], [ -47.000021, -6.000021 ], [ -46.000021, -5.000002 ], [ -46.000021, -5.000002 ], [ -46.000021, -4.000002 ], [ -46.000002, -3.0 ], [ -46.000021, -2.0 ], [ -46.000002, -2.0 ], [ -46.000021, -1.0 ], [ -46.000021, 0.0 ], [ -46.000214, 0.0 ], [ -46.000002, 0.0 ], [ -46.000021, 1.000002 ], [ -46.000021, 2.000002 ], [ -46.000021, 3.0 ], [ -46.000002, 4.008 ], [ -46.000002, 4.000002 ], [ -46.000021, 5.000021 ], [ -47.018644, 6.0 ], [ -47.000021, 7.07 ], [ -47.000021, 7.000002 ], [ -47.000002, 8.000002 ], [ -48.019805, 9.000021 ], [ -48.000021, 10.000002 ], [ -48.000021, 10.000002 ], [ -49.0, 11.000002 ], [ -49.000021, 12.000002 ], [ -49.000021, 13.000002 ], [ -50.000021, 13.000002 ], [ -50.000021, 14.000002 ], [ -51.000021, 15.000002 ], [ -51.000002, 16.000002 ], [ -52.000021, 17.017 ], [ -52.000021, 17.000021 ], [ -53.000021, 18.000021 ], [ -54.000002, 19.000002 ], [ -54.000021, 20.04 ], [ -55.000021, 20.000002 ], [ -56.000021, 21.000002 ], [ -56.000021, 22.000021 ], [ -57.000021, 23.0337 ], [ -58.000002, 23.000002 ], [ -59.000021, 24.000002 ], [ -60.0103, 25.000002 ], [ -60.000021, 26.005992 ], [ -61.000002, 26.000002 ], [ -62.000214, 27.000002 ], [ -63.000021, 28.000002 ], [ -64.000021, 28.000021 ], [ -65.000021, 29.000021 ], [ -66.000021, 30.000021 ], [ -67.000021, 31.000002 ], [ -68.000021, 31.000021 ], [ -69.000021, 32.000021 ], [ -70.000021, 33.000002 ], [ -71.000021, 33.000021 ], [ -73.000021, 34.000002 ], [ -74.000021, 35.000021 ], [ -75.000021, 36.015399 ], [ -76.000021, 36.000002 ] ], [ [ -16.000002, -68.000021 ], [ -14.000021, -66.000021 ], [ -11.000002, -65.000021 ], [ -9.000002, -63.000021 ], [ -7.000021, -62.000021 ], [ -4.000002, -60.000021 ], [ -2.0, -59.000002 ], [ 0.0, -57.000021 ], [ 1.0, -56.000002 ], [ 3.0, -54.000021 ], [ 5.000002, -53.000002 ], [ 7.000002, -52.028944 ], [ 9.000002, -50.000021 ], [ 11.000002, -49.000021 ], [ 12.000002, -47.000021 ], [ 14.000002, -46.000002 ], [ 16.000002, -44.000021 ], [ 17.000002, -43.000021 ], [ 19.000002, -42.0 ], [ 21.04, -40.000021 ], [ 22.000002, -39.000002 ], [ 23.000021, -37.000002 ], [ 25.000002, -36.000021 ], [ 26.000021, -35.007328 ], [ 27.000002, -33.000021 ], [ 29.000002, -32.000021 ], [ 30.000002, -30.000002 ], [ 31.000002, -29.000002 ], [ 32.000021, -28.000002 ], [ 33.000002, -26.000002 ], [ 34.000021, -25.000021 ], [ 35.000021, -23.000021 ], [ 36.000021, -22.000021 ], [ 37.000021, -21.000021 ], [ 37.000021, -19.000002 ], [ 38.000021, -18.000002 ], [ 39.000021, -17.000021 ], [ 39.000021, -15.000002 ], [ 40.000021, -14.000002 ], [ 41.000021, -13.02541 ], [ 41.000021, -11.000002 ], [ 42.019271, -10.000002 ], [ 42.000021, -8.000002 ], [ 42.000002, -7.000002 ], [ 43.0, -6.000002 ], [ 43.000021, -4.000002 ], [ 43.000021, -3.0 ], [ 43.000021, -2.0 ], [ 43.000002, 0.0 ], [ 43.000021, 0.0 ], [ 43.000021, 1.0 ], [ 43.000021, 3.048 ], [ 43.000002, 4.000002 ], [ 43.000021, 5.000002 ], [ 43.000021, 7.0438 ], [ 43.000214, 8.000002 ], [ 42.000021, 9.000002 ], [ 42.000021, 11.020158 ], [ 42.000002, 12.000002 ], [ 41.000002, 13.000002 ], [ 41.000021, 15.003257 ], [ 40.000021, 16.000002 ], [ 40.000002, 17.000002 ], [ 39.000021, 18.000021 ], [ 39.000021, 20.000002 ], [ 38.000021, 21.000002 ], [ 37.000021, 22.000002 ], [ 37.002901, 24.000002 ], [ 36.002147, 25.000002 ], [ 35.000002, 26.000002 ], [ 34.000021, 28.000021 ], [ 33.000021, 29.000021 ], [ 32.000021, 30.000021 ], [ 31.000002, 32.000021 ], [ 30.000002, 33.000002 ], [ 29.000002, 34.000021 ], [ 28.001372, 36.07 ], [ 26.000002, 37.000021 ], [ 25.000021, 38.000021 ], [ 24.000002, 40.01 ], [ 22.000002, 41.000021 ], [ 21.000002, 42.000021 ], [ 20.003194, 43.000021 ], [ 18.000002, 45.000021 ], [ 16.000002, 46.000002 ], [ 15.000002, 47.000021 ], [ 13.000002, 49.000021 ], [ 12.000002, 50.000021 ], [ 10.000002, 51.000214 ], [ 8.000021, 53.000021 ], [ 6.000002, 54.000021 ], [ 5.032, 55.000021 ], [ 3.0, 57.000021 ], [ 1.0, 58.000021 ], [ 0.0, 59.000002 ], [ -2.0, 61.0 ], [ -4.000002, 62.000002 ], [ -6.000002, 63.000021 ], [ -9.00824, 65.05 ], [ -11.000021, 66.000021 ], [ -13.000002, 67.000021 ], [ -15.000002, 69.038 ] ] ],
		"raise_far": [ [ [ -103.000021, -50.000021 ], [ -100.000021, -49.000021 ], [ -98.07, -47.000021 ], [ -95.000021, -46.000002 ], [ -92.000021, -44.000002 ], [ -90.048, -43.000214 ], [ -87.000021, -42.0216 ], [ -85.025, -40.000021 ], [ -82.000214, -38.000002 ], [ -80.000214, -37.000021 ], [ -77.000021, -35.000214 ], [ -75.000021, -34.002848 ], [ -73.000214, -32.000021 ], [ -71.000021, -30.000002 ], [ -69.000021, -28.000002 ], [ -67.000021, -26.000021 ], [ -65.000021, -25.000002 ], [ -63.000214, -23.000021 ], [ -61.000214, -21.000002 ], [ -59.000021, -19.000002 ], [ -57.000214, -17.000002 ], [ -56.000021, -15.000021 ], [ -54.000021, -13.000021 ], [ -52.000021, -11.000002 ], [ -51.0, -9.000021 ], [ -49.000021, -7.000002 ], [ -47.000021, -5.0 ], [ -46.000021, -3.0 ], [ -44.000021, -1.0 ], [ -43.000021, 0.0 ], [ -42.009049, 2.0 ], [ -40.000021, 5.000002 ], [ -39.000214, 7.000002 ], [ -37.000002, 9.000002 ], [ -36.000002, 11.000002 ], [ -35.000214, 13.000002 ], [ -34.000021, 16.000021 ], [ -32.000021, 18.000021 ], [ -31.000021, 20.000021 ], [ -30.000021, 22.000002 ], [ -29.000021, 25.000021 ], [ -27.000002, 27.000021 ], [ -26.000021, 29.000002 ], [ -25.000002, 32.025072 ], [ -24.000002, 34.000214 ], [ -23.000021, 36.000214 ], [ -22.000002, 38.000021 ], [ -21.000002, 41.000021 ], [ -19.000021, 43.000021 ], [ -18.000002, 45.000021 ], [ -17.000002, 48.000002 ], [ -16.000021, 50.000002 ], [ -15.000002, 52.000021 ], [ -14.000021, 55.000021 ], [ -13.000002, 57.000002 ], [ -12.000002, 59.000021 ], [ -10.000002, 62.000021 ], [ -9.000021, 64.000021 ], [ -8.000002, 66.000021 ], [ -7.000002, 68.000021 ], [ -6.000002, 71.000021 ], [ -5.000002, 73.002147 ], [ -3.0, 75.000214 ], [ -2.0, 78.029 ], [ -1.0, 80.000021 ], [ 0.0, 82.000021 ], [ 0.0, 84.000021 ], [ 2.000002, 86.000021 ], [ 3.0, 89.0 ], [ 4.000214, 91.000021 ], [ 6.000002, 93.000021 ], [ 7.000002, 95.000021 ], [ 9.000002, 97.000021 ], [ 10.000002, 99.000021 ], [ 12.05, 101.000021 ], [ 13.000021, 103.000021 ], [ 15.000002, 105.021474 ], [ 16.000021, 107.000021 ], [ 18.000002, 109.000021 ], [ 19.000002, 111.000021 ], [ 21.000002, 113.000214 ], [ 23.000002, 115.000214 ], [ 25.000002, 117.000214 ], [ 27.023626, 119.000021 ], [ 28.000021, 121.000021 ], [ 30.000002, 123.000214 ], [ 32.000002, 124.000021 ], [ 34.000021, 126.000021 ], [ 36.000002, 128.000021 ], [ 39.031, 130.000021 ], [ 41.000002, 131.000021 ], [ 43.000021, 133.000214 ], [ 45.000002, 134.000021 ], [ 48.0, 136.000021 ], [ 50.000021, 138.0416 ], [ 52.000002, 139.000021 ], [ 55.000021, 140.000021 ], [ 58.0, 142.000214 ], [ 60.000214, 143.000214 ], [ 63.000021, 145.0419 ], [ 66.000021, 146.000021 ], [ 69.000021, 147.000021 ] ], [ [ -44.000021, -84.000021 ], [ -41.000002, -83.02 ], [ -38.000002, -81.000214 ], [ -35.000021, -80.000021 ], [ -33.000002, -78.000021 ], [ -30.000002, -77.000021 ], [ -28.0175, -75.000021 ], [ -25.000002, -74.000021 ], [ -23.000002, -72.000021 ], [ -20.000021, -71.000214 ], [ -18.000214, -69.000021 ], [ -16.000021, -67.000021 ], [ -14.0263, -66.000021 ], [ -11.000002, -64.000021 ], [ -9.000002, -62.000021 ], [ -7.000021, -60.000002 ], [ -5.000002, -59.014593 ], [ -3.0, -57.000002 ], [ -1.0, -55.000021 ], [ 0.0, -53.000021 ], [ 1.0, -51.000021 ], [ 3.000002, -49.000002 ], [ 5.0, -47.000002 ], [ 6.0, -45.000021 ], [ 8.000002, -43.000002 ], [ 9.000021, -41.000021 ], [ 11.000002, -39.000002 ], [ 13.054, -37.000002 ], [ 14.000002, -35.000021 ], [ 16.01, -33.009165 ], [ 17.000002, -30.000002 ], [ 18.000002, -28.000002 ], [ 20.000002, -26.000021 ], [ 21.000002, -24.000002 ], [ 22.000002, -22.000002 ], [ 24.000021, -19.000021 ], [ 25.000002, -17.000021 ], [ 26.000021, -15.000021 ], [ 27.000002, -13.000002 ], [ 29.000214, -10.000002 ], [ 30.000002, -8.000002 ], [ 31.000021, -6.000002 ], [ 32.000021, -4.000021 ], [ 33.000021, -1.0 ], [ 35.02, 0.0 ], [ 36.000002, 2.000021 ], [ 37.000021, 5.000002 ], [ 38.000002, 7.000021 ], [ 39.000021, 9.000002 ], [ 40.000002, 12.04 ], [ 41.000021, 14.000002 ], [ 42.000002, 16.000002 ], [ 44.006293, 18.000002 ], [ 45.000021, 21.000021 ], [ 46.000021, 23.000002 ], [ 47.000021, 25.000021 ], [ 48.000021, 28.000021 ], [ 49.000021, 30.000002 ], [ 50.000002, 32.000002 ], [ 51.000214, 35.000021 ], [ 53.000021, 37.000021 ], [ 54.000002, 39.000214 ], [ 55.000214, 41.000021 ], [ 56.000002, 44.000021 ], [ 57.000002, 46.000021 ], [ 59.000021, 48.000002 ], [ 60.000021, 50.000021 ], [ 61.000021, 53.005508 ], [ 63.0, 55.000021 ], [ 64.000021, 57.000021 ], [ 65.000021, 59.000021 ], [ 67.000021, 61.000021 ], [ 68.000021, 63.000002 ], [ 70.000021, 65.000021 ], [ 71.000021, 67.000021 ], [ 73.024888, 70.018 ], [ 74.000021, 72.025224 ], [ 76.000021, 74.000021 ], [ 77.000021, 76.023379 ], [ 79.000021, 78.032 ], [ 81.000214, 79.000021 ], [ 82.000021, 81.000021 ], [ 84.000021, 83.000021 ], [ 86.000021, 85.000021 ], [ 88.000021, 87.000021 ], [ 90.000021, 89.000021 ], [ 92.000021, 91.0 ], [ 94.000021, 92.000021 ], [ 96.000021, 94.000021 ], [ 98.000021, 96.000021 ], [ 100.000021, 97.000021 ], [ 102.002147, 99.000021 ], [ 105.000021, 101.000021 ], [ 107.000021, 102.000214 ], [ 109.000021, 104.000021 ], [ 112.000021, 105.000021 ], [ 114.000021, 107.0 ], [ 117.000021, 108.000021 ], [ 120.000021, 109.000021 ], [ 122.000021, 111.000021 ], [ 125.000021, 112.000021 ], [ 128.000021, 113.000021 ] ] ],
		"raise_near": [ [ [ 44.000002, 95.000214 ], [ 47.000002, 93.000021 ], [ 49.000002, 91.000021 ], [ 52.000021, 90.000021 ], [ 54.000021, 88.000021 ], [ 57.000021, 87.000021 ], [ 59.000021, 86.0322 ], [ 62.06, 84.000021 ], [ 64.000214, 83.000214 ], [ 66.000214, 82.000021 ], [ 68.000021, 81.000021 ], [ 70.000021, 81.049 ], [ 72.000021, 80.000021 ], [ 74.000214, 79.000021 ], [ 76.000214, 79.000021 ], [ 78.000021, 78.000021 ], [ 80.000021, 78.000214 ], [ 82.000021, 77.000021 ], [ 84.000021, 77.000021 ], [ 86.006021, 77.000021 ], [ 87.000021, 77.000021 ], [ 89.000021, 77.000021 ], [ 91.000021, 77.000021 ], [ 92.000021, 77.000021 ], [ 94.000214, 77.000021 ], [ 95.000021, 77.000021 ], [ 97.000021, 78.000021 ], [ 98.000021, 78.000021 ], [ 100.000021, 78.000021 ], [ 101.000021, 79.000021 ], [ 103.0, 79.000021 ], [ 104.000021, 80.000021 ], [ 105.000021, 80.000021 ], [ 107.000021, 81.000021 ], [ 108.000021, 82.000021 ], [ 109.000021, 82.000021 ], [ 111.008089, 83.000214 ], [ 112.000021, 84.000214 ], [ 113.000021, 85.026 ], [ 114.000021, 85.000021 ], [ 115.000214, 86.000021 ], [ 117.000021, 87.000021 ], [ 118.000214, 88.000021 ], [ 119.000021, 89.000021 ], [ 120.000021, 90.000021 ], [ 121.000021, 91.007715 ], [ 123.000021, 91.000021 ], [ 124.000021, 92.000214 ], [ 125.000021, 93.000021 ], [ 126.000021, 94.000021 ], [ 127.000021, 95.000021 ], [ 128.000021, 96.000021 ], [ 130.000214, 97.000021 ], [ 131.000214, 98.000021 ], [ 132.000021, 99.000021 ], [ 133.000021, 100.000021 ], [ 134.000214, 101.000021 ], [ 136.0, 102.04 ], [ 137.000021, 102.000021 ], [ 138.000021, 103.000214 ], [ 139.000021, 104.000021 ], [ 141.015004, 105.000021 ], [ 142.000021, 106.000214 ], [ 143.000214, 106.000214 ], [ 144.000021, 107.000021 ], [ 146.000021, 108.000021 ], [ 147.000021, 108.000021 ], [ 148.000021, 109.000214 ], [ 150.000214, 110.07 ], [ 151.000214, 110.000021 ], [ 153.000214, 111.063 ], [ 154.000214, 111.000021 ], [ 156.000214, 111.000214 ], [ 157.000021, 112.000021 ], [ 159.000021, 112.000021 ], [ 160.000021, 112.000214 ], [ 162.000214, 112.000214 ], [ 164.000021, 112.000021 ], [ 165.000021, 113.007 ], [ 167.000021, 112.000021 ], [ 169.000214, 112.000021 ], [ 171.000021, 112.000214 ], [ 173.000021, 112.000021 ], [ 175.000214, 112.000021 ], [ 177.03077, 111.000021 ], [ 179.07, 111.000021 ], [ 181.000021, 110.000021 ], [ 183.000021, 110.000214 ], [ 185.000021, 109.000021 ], [ 187.000214, 108.000021 ], [ 189.000214, 107.000214 ], [ 192.000021, 106.000021 ], [ 194.000021, 105.000214 ], [ 196.000021, 104.000021 ], [ 199.000021, 103.000021 ], [ 201.000021, 101.000021 ], [ 204.000214, 100.000214 ], [ 207.000214, 98.000214 ], [ 209.000021, 96.000021 ], [ 212.000021, 95.000021 ], [ 215.000214, 93.000214 ], [ 218.000021, 91.000021 ] ], [ [ 105.000021, 129.000021 ], [ 107.000021, 127.000021 ], [ 110.000021, 126.02027 ], [ 112.000021, 124.000021 ], [ 115.000021, 122.000214 ], [ 117.000021, 121.000021 ], [ 120.002147, 119.000214 ], [ 122.000021, 118.000021 ], [ 124.000021, 117.000021 ], [ 126.000214, 116.000021 ], [ 129.0, 115.000214 ], [ 131.000021, 114.000021 ], [ 133.000214, 113.000021 ], [ 135.000021, 112.000021 ], [ 137.000021, 112.000021 ], [ 139.000021, 111.000021 ], [ 141.004797, 111.000021 ], [ 142.000021, 110.000021 ], [ 144.000214, 110.000021 ], [ 146.000214, 110.000021 ], [ 148.000214, 110.000214 ], [ 149.000021, 110.000214 ], [ 151.000021, 110.000021 ], [ 153.000214, 110.000021 ], [ 154.000021, 110.002147 ], [ 156.000021, 110.000021 ], [ 157.000214, 111.000214 ], [ 159.000021, 111.000021 ], [ 160.000021, 111.000021 ], [ 162.000021, 112.000021 ], [ 163.000021, 112.000214 ], [ 165.000021, 113.000214 ], [ 166.000021, 114.000021 ], [ 167.000021, 114.000021 ], [ 169.000021, 115.000021 ], [ 170.000021, 116.000021 ], [ 171.000214, 116.000021 ], [ 173.000021, 117.000214 ], [ 174.000021, 118.000021 ], [ 175.000021, 119.000021 ], [ 177.057, 120.000021 ], [ 178.000021, 121.000021 ], [ 179.000021, 122.000021 ], [ 180.000021, 123.0 ], [ 182.01, 124.045 ], [ 183.000214, 125.01841 ], [ 184.000021, 126.0167 ], [ 185.000214, 127.019 ], [ 186.000021, 128.02 ], [ 188.020332, 129.03 ], [ 189.000021, 130.000021 ], [ 190.000021, 131.0387 ], [ 191.000214, 132.018099 ], [ 192.000021, 133.06 ], [ 194.000214, 134.03116 ], [ 195.002147, 135.014038 ], [ 196.000021, 136.000021 ], [ 197.000021, 136.000021 ], [ 199.0, 137.000021 ], [ 200.000021, 138.000021 ], [ 201.000021, 139.000214 ], [ 202.000214, 140.000021 ], [ 204.000021, 141.000021 ], [ 205.000021, 142.000021 ], [ 206.000021, 142.000214 ], [ 208.000021, 143.000021 ], [ 209.000021, 144.000021 ], [ 210.000214, 145.025392 ], [ 212.000021, 145.000021 ], [ 213.000021, 146.000021 ], [ 215.000021, 146.000214 ], [ 216.000021, 147.000021 ], [ 218.000021, 147.000021 ], [ 219.000021, 148.02007 ], [ 221.000214, 148.000021 ], [ 222.000021, 148.000021 ], [ 224.000021, 148.000021 ], [ 226.000021, 148.000021 ], [ 227.000021, 148.000021 ], [ 229.000021, 148.000021 ], [ 231.000021, 148.000021 ], [ 233.000021, 148.000021 ], [ 235.000021, 148.000214 ], [ 237.00795, 148.0 ], [ 238.000021, 147.000021 ], [ 240.000021, 147.000021 ], [ 242.000214, 146.000021 ], [ 244.000021, 145.000021 ], [ 247.0, 145.000021 ], [ 249.000021, 144.000214 ], [ 251.000021, 143.000021 ], [ 253.000021, 142.000021 ], [ 255.000021, 141.000021 ], [ 258.000214, 139.000021 ], [ 260.000214, 138.000021 ], [ 263.000214, 137.0083 ], [ 265.000021, 135.000021 ], [ 268.000214, 133.000021 ], [ 270.000214, 131.000021 ], [ 273.000021, 129.000021 ], [ 276.000214, 127.000021 ], [ 279.000021, 125.000021 ] ] ]
	},
	track_matches: {
		"13": [ [ 14, 36 ], [ 12, 23 ] ],
		"15": [ [ 12, 52 ], [ 14, 85 ] ],
		"17": [ [ 14, 47 ], [ 12, 78 ] ],
		"19": [ [ 12, 69 ], [ 14, 89 ] ],
		"35": [ [ 23, 25 ], [ 36, 58 ] ],
		"37": [ [ 47, 23 ], [ 78, 36 ] ],
		"39": [ [ 69, 36 ], [ 89, 23 ] ],
		"51": [ [ 45, 14 ], [ 56, 12 ] ],
		"53": [ [ 65, 36 ], [ 54, 23 ] ],
		"57": [ [ 45, 47 ], [ 56, 78 ] ],
		"59": [ [ 65, 69 ], [ 54, 89 ] ],
		"75": [ [ 78, 52 ], [ 47, 85 ] ],
		"79": [ [ 69, 47 ], [ 89, 78 ] ],
		"95": [ [ 89, 25 ], [ 69, 58 ] ],
	},
	match_mirrors: {
		"12": 69, "14": 89, //These indicate direction, as keyed to the numpad. Also, picture the numpad as a diamond.
		"23": 47, "25": 45,
		"36": 78, "45": 25,
		"47": 23, "52": 65,
		"54": 85, "56": 58,
		"58": 56, "65": 52,
		"69": 12, "78": 36,
		"85": 54, "89": 14,
	},
	next_mirrors: {
		"1": 9,
		"3": 7,
		"7": 3,
		"9": 1
	},
},

on_train_enter: "[
	if(tracks[0] in [17,39],
		set(arg.z_track, if(arg.z-z < 20, 30, 10))
		),
	fire_event(self, 'set_train_z', arg),
	]",
	
on_set_train_z: "[
	set(arg.z, self.z+arg.vars.z_track),
	]",
	
on_train_enter2: "if(not arg.number, set(vars.train_on, arg))", //The thinking here is that, if a track piece were to accidentally override this bit of code, it would introduce a nasty win condition error. Therefore, we shall use a seperate function for it to reduce the chance of error.
	
on_train_exit2: "set(vars.train_on, false)",

on_train_crash: "if(not arg.vars.done or arg.vars.number, [
		set(ps.midpoint_x, arg.midpoint_x), 
		set(ps.midpoint_y, arg.midpoint_y), 
		add_object(ps),
		] where ps = object('ct-train-death-effect', x, y, facing) )",
}