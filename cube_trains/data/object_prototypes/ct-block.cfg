{
id: "ct-block",
prototype: ["ct-3d"],
zorder: 0,

properties: {
	#only ct-tracks can do this
	set_branch: "def(val) 0",
	
	#displayed by the cursor
	message: "",
	
	change_save_val: "def(val) 0",
	neighbours: "map(range(location[0]-1, location[0]+2), 'one', #Returns objects in a 3Â³ area surrounding self, and possibly including self.#
		map(range(location[1]-1, location[1]+2), 'two', 
			map(range(location[2]-1, location[2]+2), 'three', 
				filter(level.chars, 'lch', lch.vars.location = [one, two, three])
				)
			)
		)",
		
	placementRequirementsMet: "def(chars)	#Ground rules for placing a piece. Use the above for specifying special rules.#
		if(level.player.is_in_limits(self.location),
			if((not sum(transform(incompatible_groups, v in pot_chars))),	#Are any of the groups we're not suppose to overlap already in use by any of the objects at the current tile?#
				additionalPlacementRequirementsMet(chars),
				{'ok' -> 0, 'error' -> 'Something is in the way.'}
				) where pot_chars = flatten(transform(potentially_at_position(chars), v.vars.group)),
			{'ok' -> 0, 'error' -> 'The piece is out of bounds.'})",
	additionalPlacementRequirementsMet: "def(chars) {'ok' -> 1}",

	#For placing a piece in-game. Override if needed in objects.#
	incompatible_groups: "#Call _incompatible_groups to eliminate doubles from the flat list of all the groups returned by _incompatible_groups_get_meg.#
		_incompatible_groups(
			flex_sum(transform(self.vars.group,
				_incompatible_groups_get_meg(v, level.player.vars.mutually_exclusive_groups)
				), [])
			)",
	incompatible_ghost_groups: "#As above, but includes the ghost_group variable. For use example, see metatracks.#
		_incompatible_groups(
			flex_sum(transform(self.vars.group + if(self.vars.ghost_group, self.vars.ghost_group, []),
				_incompatible_groups_get_meg(v, level.player.vars.mutually_exclusive_groups)
				), [])
			)",
	_incompatible_groups_get_meg: "def(target_group, megs) #Returns a list containing all the mutually exclusive groups our object's groups intersect, plus all our object's groups.#
		if(size(megs),
			if(target_group in megs[0],
				megs[0] + _incompatible_groups_get_meg(target_group, megs[1:size(megs)]),
				_incompatible_groups_get_meg(target_group, megs[1:size(megs)])),
			[target_group])",
	_incompatible_groups: "def(queue) #Removes doubles from the list of groups passed in.#
		if(size(queue),
			if(queue[0] in rest,
				rest,
				rest + [queue[0]])
				where rest = _incompatible_groups(queue[1:size(queue)]),
			[])",
			
	groups_at: "def(location, chars) flatten(map(potentially_at_coord(location, chars), 'ac', ac.vars.group))",
	
	additionalBlocks: "def(chars) []",
},

#{'id' -> 'object id', 'pos' -> relative location[, 'tick' -> int, 'method' -> string]} - A list of objects to add before trying to add the current object.
#
vars: {
	group: ["base"],
	save_val: 0,
	branch: "normal", #'branch' as in 'branch of track'. Normal is Grey.
	
	editable: 0, #Is this object editable by the user?
	
	#On placement:
	blocksToAdd: [],
	groupsToRemove: [],
	
	requiredGroups: [],
	
	cost: 1, #For the player, how much should this block cost him?
},

#{'group' -> 'group name', pos -> relative location} - Any object in group at loc will be removed. For example, walls would remove shrubbery, but not vice-versa.
on_first_cycle: "[
	fire_event('overlay'),
	fire_event('add_to_cache'),
	#add(level.player.vars.groupMap['objs'][index[0]][index[1]][index[2]], 1) 
	where index = list_add(vars.location, level.player.vars.groupMap['offset'])#]",
on_done_first_cycle: "map(vars.overlays, 'over', set(over.alpha, self.alpha))",

on_remove: "[
	map(overlays + [self], 'rem', remove_object(rem)),
	fire_event('remove_from_to_cache')]",

on_add_to_cache: "
	if(size(vars.group) and (not level.player.vars.edit_all),
		set(level.player.vars.groupMap, {
			'offset': level.player.vars.groupMap['offset'],
			'size': level.player.vars.groupMap['size'],
			'objs': list_replace_elements(level.player.vars.groupMap['objs'], indexes[0], 
				[list_replace_elements(level.player.vars.groupMap['objs'][indexes[0]], indexes[1], 
					[list_replace_elements(level.player.vars.groupMap['objs'][indexes[0]][indexes[1]], indexes[2], 
						[level.player.vars.groupMap['objs'][indexes[0]][indexes[1]][indexes[2]] + vars.group]
						)]
					)]
				)
			}) where indexes = list_add(vars.location, level.player.vars.groupMap['offset'])
		)",
		
on_remove_from_to_cache: "
	if(size(vars.group) and (not level.player.vars.edit_all),
		set(level.player.vars.groupMap, {
			'offset': level.player.vars.groupMap['offset'],
			'size': level.player.vars.groupMap['size'],
			'objs': list_replace_elements(level.player.vars.groupMap['objs'], indexes[0], 
				[list_replace_elements(level.player.vars.groupMap['objs'][indexes[0]], indexes[1], 
					[list_replace_elements(level.player.vars.groupMap['objs'][indexes[0]][indexes[1]], indexes[2], 
						[filter(level.player.vars.groupMap['objs'][indexes[0]][indexes[1]][indexes[2]], 'existing', not existing in vars.group)]
						)]
					)]
				)
			}) where indexes = list_add(vars.location, level.player.vars.groupMap['offset'])
		)",

on_move: "[map(overlays, 'rem', remove_object(rem)), fire_event('overlay')]",
}