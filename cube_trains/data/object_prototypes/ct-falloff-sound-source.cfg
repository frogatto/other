{
id: "ct-falloff-sound-source",
always_active: true,

properties: {
	_sound_distance: "def(source, reciever) //Takes two lists. Must return a decimal value.
		decimal(
			max(
				map(
					list_subtract(
						xyz(source), 
						xyz(reciever) )
						where xyz = def(obj) [obj.midpoint_x, obj.midpoint_y, (obj.vars.location or obj.vars.on_track.vars.location)[2]*62],
					abs(value))
				)
			)",
		
	sound_volume_multiplier: "def(source, reciever) 
		max(self.vars.sound_volume_scale.min, 
			((mad - _sound_distance(source, reciever)) / mad
				where mad = self.consts.sound_attenuation_distance)
				- (1-self.vars.sound_volume_scale.max))
		* self.vars._sound_current_volume",
		
	sound_enable: "[set(self.vars.sound_enabled, true), fire_event('create')]",
	sound_disable: "[set(self.vars.sound_enabled, false), fire_event('die')]",
	
	sound_fade_in: "self._sound_fade(true)",
	sound_fade_out: "self._sound_fade(false)",
	_sound_fade: "def(mode) 
		map(
			if(mode, range(sfd), reverse(range(sfd))),
			schedule(value, set(self.vars._sound_current_volume, (value+1)/sfd))
			) where sfd = decimal(self.vars.sound_fade_duration)",
			
	_sound_controller_existing: "
		find(level.chars, 
			value.type='ct-falloff-sound-controller' and
			value.vars.sound_file=self.vars.sound_file)",
			
	_sound_new_control: "[
		set(ctrl.vars.monitoring, [self]),
		set(ctrl.vars.sound_file, self.vars.sound_file),
		set(self.vars._sound_controller, ctrl),
		add_object(ctrl),
		] where ctrl = object('ct-falloff-sound-controller')",
},

vars: {
	sound_enabled: true,			//Prefer using the accessor properties, sound_enable/sound_disable, unless you haven't added the object yet.
	sound_file: false, 				//Set to something like 'sound.wav'.
	sound_volume_scale: {max:0.75},	//Endpoints for volume scale are defined by 'min' and 'max'.
	sound_fade_duration: 15, 		//Fade in/out frame duration.
	_sound_current_volume: 0,		//Internal counter, for use with fading in/out. Ranges between 1 and 0.
	_sound_controller: null,		//The sound controller will set this when we are registered with it.
},

consts: {
	sound_attenuation_distance: 1000,	//Distance for maximum softness, if maximum loudness is 1.
							  			//For example, the default volume range is from 0 to .75, which would cause the sound to start playing at a distance of 7.5. If the maximum volume loudness was 1, we'd play at 10.
	},
	
on_create: "[if(sound_enabled, 
	if(ctrl, ctrl.add(self), _sound_new_control)
		where ctrl = _sound_controller_existing
	),
	sound_fade_in,
	]",
	
on_die: "if(_sound_controller, _sound_controller.remove(self))",

}