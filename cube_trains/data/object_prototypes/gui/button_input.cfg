{
#This is the prototype for buttons. The object implimenting this should have a 'normal' animation.
#An object using this has access to the relevant events. Remember to use %PROTO% if needed.
id: "button_input",
prototype: ["base_input"],

properties: {
	set_skin: "def(to={'reset':true}) [ //This function is disturbingly lacking in error checking. 
		if(to.reset, set(self.vars.skin, self.consts.skin), set(self.vars.skin,  self.consts.skin+to)),
		fire_event(self, 'mouse_not_over')]",
},

consts: {
	am_button: 1,
	skin:{	"over":"over", 
			"down":"down", 
			"normal":"normal",	},
	},
	
vars: {
	skin:{	"over":"over", 
			"down":"down", 
			"normal":"normal",	},
},

on_mouse_over: "[
	if(skin['over'] in self.available_animations and not consts.animation_lock, 
		set(self.animation, skin['over']), 
		set(self.brightness, 300)),
	if('left' in level.player.ctrl_mice[0], fire_event('mouse_left_down'))]",
on_mouse_not_over: "[
	if(skin['normal'] in self.available_animations and not consts.animation_lock, 
		set(self.animation, skin['normal'])),
	set(self.brightness, 255), ]",
on_mouse_left_down: "
	if(skin['down'] in self.available_animations and not consts.animation_lock, 
		set(self.animation, skin['down']), 
		set(self.brightness, 200))",
on_mouse_not_left_down: "
	if(skin['over'] in self.available_animations and not consts.animation_lock, 
		set(self.animation, skin['over']), 
		set(self.brightness, 300))",

}