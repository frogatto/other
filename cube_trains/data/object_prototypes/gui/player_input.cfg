{
#This should be a prototype for the player, if the ffl input system is being used.
#Note: If input isn't working, you may need to include the "%PROTO%" instruction in the on_process and on_first_cycle events. Otherwise, the events may be swallowed.
id: "player_input",
properties: {
	key_input: "if(not text_captured, ctrl_keys)",

	#Adjusted_mice is the same as ctrl_mice but returns the pointer position in level coordinates, as opposed to screen coordinates.
	adjusted_mice: "map(ctrl_mice, 'mouse', [	(mouse[0] + level.camera_position[0]), 
													(mouse[1] + level.camera_position[1]),
													] + mouse[2:size(mouse)])",
	cursor_over_rect: "def(rect) find(adjusted_mice, 'am',
			rect[0] < am[0] and 
			rect[1] > am[0] and 
			rect[2] < am[1] and 
			rect[3] > am[1])",
	cursor_index_over_rect: "def(rect) _cursor_index_over_rect(rect, 0)",

	#This bit should work on a multi-mouse platform, but I haven't been able to test it.
	#
	_cursor_index_over_rect: "def(rect, step) if(size(adjusted_mice) > step, if(rect[0] < am[0] and rect[1] > am[0] and rect[2] < am[1] and rect[3] > am[1], step, _cursor_index_over_rect(rect, step+1)) where am = adjusted_mice[step], 0)",
	obj_rect: "def(widget) [widget.x, widget.x+widget.img_w, widget.y, widget.y+widget.img_h]",
},

on_first_cycle: "[
	set(widgets, []),			#Contains each spawned widget.#
	set(monitor_over, []),		#Monitor widgets to check for negative events.#
	set(monitor_left_down, []),
	set(monitor_right_down, []),
	set(monitor_potential_drag, []),
	set(monitor_drag, []),
	]",
	
// on_process: "[
// 	[set(vars.monitor_potential_drag, filter(monitor_potential_drag, 'mpd', not mpd in promoted + ended)),
// 	if(size(promoted), [
// 		set(vars.monitor_drag, vars.monitor_drag + [promoted[0]]),
// 		fire_event(promoted[0]['obj'], 'mouse_start_drag'), #TODO; Only for one-mouse setups atm.#
// 		set(vars.monitor_potential_drag, []),
// 		]),
// 	transform(ended, fire_event(v['obj'], 'mouse_cancel_drag')),
// 	] where promoted = filter(monitor_potential_drag, 'pd', length(pd.start_cursor[0], pd.start_cursor[1], adjusted_mice[pd.cursor_index][0], adjusted_mice[pd.cursor_index][1]) > 10)
// 	where ended = filter(monitor_potential_drag, 'pd', not 'left' in adjusted_mice[pd.cursor_index]),
// 	
// 	fire_event('positive_mouse_events'),
// 	fire_event('negative_mouse_events'),
// 	]",
// 	
// on_positive_mouse_events: "[
// 	transform(vars.widgets, [
// 		if(cor and v.usable(cor), [
// 			if(not v in vars.monitor_over, 
// 				[fire_event(v, 'mouse_over'),
// 				add(vars.monitor_over, [v])]
// 				),
// 				
// 			if('left' in cor and (not v in vars.monitor_left_down + map(vars.monitor_potential_drag, 'mpd', mpd.obj) + map(vars.monitor_drag, 'md', md.obj)),
// 				[fire_event(v, 'mouse_left_down'),
// 				add(vars.monitor_left_down, [v]),
// 				if(not size(vars.monitor_drag),
// 					add(vars.monitor_potential_drag, [{'obj' -> v, 'start_cursor' -> cor, 'cursor_index' -> cursor_index_over_rect(obj_rect(v))}])
// 					),
// 				]),
// 				
// 			if('right' in cor and (not v in vars.monitor_right_down),
// 				[fire_event(v, 'mouse_right_down'),
// 				add(vars.monitor_right_down, [v])]
// 				),
// 				
// 			])	where cor = cursor_over_rect(obj_rect(v)),
// 		]),
// 	]",
// 	
// on_negative_mouse_events: "[
// 	[map(not_over, 'nov',
// 		fire_event(nov, 'mouse_not_over')),
// 	set(vars.monitor_over, filter(vars.monitor_over, 'mo', not mo in not_over))
// 	] where not_over = filter(vars.monitor_over, 'mo', not cursor_over_rect(obj_rect(mo))),
// 	
// 	[map(not_over, 'nov',
// 		if(cursor_over_rect(obj_rect(nov)),
// 			fire_event(nov, 'mouse_not_left_down'))
// 		),
// 	set(vars.monitor_left_down, filter(vars.monitor_left_down, 'mo', not mo in not_over))
// 	] where not_over = filter(vars.monitor_left_down, 'mo', not 'left' in cursor_over_rect(obj_rect(mo))),
// 	
// 	[map(not_over, 'nov',
// 		if(cursor_over_rect(obj_rect(nov)),
// 			fire_event(nov, 'mouse_not_right_down'))
// 		),
// 	set(vars.monitor_right_down, filter(vars.monitor_right_down, 'mo', not mo in not_over))
// 	] where not_over = filter(vars.monitor_right_down, 'mo', not 'right' in cursor_over_rect(obj_rect(mo))),
// 	
// 	[set(vars.monitor_drag, filter(vars.monitor_drag, 'md', not md in ended)),
// 	map(ended, 'end', fire_event(end['obj'], 'mouse_end_drag')),
// 	] where ended = filter(monitor_drag, 'md', not 'left' in adjusted_mice[md.cursor_index]),
// 	
// 	]",
}