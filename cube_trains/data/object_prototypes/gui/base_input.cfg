{
#This is the prototype for buttons. The object implimenting this must have a 'normal' animation.
id: "base_input",
always_active: true,
zorder: 100000,
use_absolute_screen_coordinates: true,

properties: {
	getAnchor: "def(mode, crds_in) [
		if(mode in [1,4,7], crds[0], if(mode in [2,5,8], crds[0], if(mode in [3,6,9], crds[0]))),
		if(mode in [7,8,9], crds[1], if(mode in [4,5,6], crds[1], if(mode in [1,2,3], crds[1])))
		] where crds = anchor(mode, crds_in)",
	setAnchor: "def(mode, crds_in) [
		if(mode in [1,4,7], set(self.x, crds[0]), if(mode in [2,5,8], set(self.midpoint_x, crds[0]), if(mode in [3,6,9], set(self.x, crds[0]-self.img_w)))),
		if(mode in [7,8,9], set(self.y, crds[1]), if(mode in [4,5,6], set(self.midpoint_y, crds[1]), if(mode in [1,2,3], set(self.y, crds[1]-self.img_h))))
		] where crds = anchor(mode, crds_in)",
	anchor: "def(mode, crds_in)
		list_add(
			list_multiply(
				[	if(mode in [1,4,7], 1, if(mode in [3,6,9], -1)),
					if(mode in [7,8,9], 1, if(mode in [1,2,3], -1))],
				if(is_list(vars.offset), vars.offset, [vars.offset, vars.offset])), 
			if(is_list(crds_in), crds_in, crds_in()))",
				
	# 		Anchor Mode Map:
	# 		 ╔═╦═╦═╗
	# 		 ║7║8║9║
	# 		 ╠═╬═╬═╣
	# 		 ║4║5║6║
	# 		 ╠═╬═╬═╣
	# 		 ║1║2║3║
	# 		 ╚═╩═╩═╝
	# 		For example, getAnchor(2) would return [midpoint_x, y+img_h] of this object. Anchor point 7 would be just [x,y], and 5 returns the midpoints.
	getCameraAnchor: "def(mode)
			list_add(
				/*level.camera_position[0:2]*/[0,0],
				[	if(mode in [1,4,7], 0, if(mode in [2,5,8], level.camera_position[2]/2-self.img_w/2, if(mode in [3,6,9], level.camera_position[2]-self.img_w))),
					if(mode in [7,8,9], 0, if(mode in [4,5,6], level.camera_position[3]/2-self.img_h/2, if(mode in [1,2,3], level.camera_position[3]-self.img_h+1)))])",

	#		getCameraAnchor = getCameraAnchor_ 
	#This is so we can subclass it, and still referenc it. It only works once... so that's why we add getCameraAnchor__ and getCameraAnchor___ as needed. Either that or bug Sirp to add proto.getCameraAnchor.
	#Redefine usable to fail when your object shouldn't capture mouse input for some reason.
	usable: "def(smouse) 1",
	
	activate_widget: "[ #This is only for use for after you've deactivated the widget, it's automatically activated.#
		add(level.player.vars.widgets, [self]),
		//debug(level.player.type),
		]",
		
	deactivate_widget: "[
		set(level.player.vars.widgets, filter(level.player.vars.widgets, 'widget', widget != self)),
		]",
},

vars: {
	offset: 0,

	#The margin of the object when setting position. Can be a number, or a list containing an x/y pair.
	reference_anchor: 0,

	#A function which takes no args, or a list containing an x/y pair. This object can provide a reference point via the getAnchor method.
	anchorPoint: 7,
	is_widget: 1,
},

on_create: "[
	schedule(5, fire_event('redraw')),
	]",

on_first_cycle: "[
	activate_widget,
	if(not vars.reference_anchor, set(vars.reference_anchor, def() getCameraAnchor(7))),
	fire_event('update_position'),
	]",
	
on_update_position: "if(vars.reference_anchor, [
	setAnchor(vars.anchorPoint, vars.reference_anchor),
	if(not is_list(vars.reference_anchor), schedule(1, fire_event('xupdate_position')))])",
	
on_redraw: "if(vars.reference_anchor and (not is_list(vars.reference_anchor)), [
	setAnchor(vars.anchorPoint, vars.reference_anchor),
	])",
	
// bridge code
on_mouse_enter: "fire_event('mouse_over')",
on_mouse_leave: "fire_event('mouse_not_over')",
on_mouse_down: "fire_event(switch(mouse_button,
	1, 'mouse_left_down',
	2, 'mouse_middle_down',
	3, 'mouse_right_down',
	4, 'mouse_wheel_incriment',
	5, 'mouse_wheel_decrement',
	6, 'mouse_side1_down',
	7, 'mouse_side2_down',
	'mouse error'
	))",
on_mouse_up: "schedule(1,fire_event(switch(mouse_button,
	1, 'mouse_not_left_down',
	2, 'mouse_not_middle_down',
	3, 'mouse_not_right_down',
	6, 'mouse_not_side1_down',
	7, 'mouse_not_side2_down',
	'mouse_error'
	)))",
}