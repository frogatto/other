{
	zorder: 2,
	"animation": [
		{
			"frames": 2,
			"id": "flying",
			"image": "copter.png",
			"rect": [4,10,55,41],
			solid_area: [10,10, 40, 20],
			body_area: "all",
			duration: 6
		},
		{
			"frames": 1,
			"id": "spawning",
			"image": "copter.png",
			"rect": [0,0,1,1],
			duration: 150
		}
	],
	editor_info: {
		category: "duxduo"
	},
	vars: {
		side: 2,
		_fuel: 1000,
		_money: 0,
		_ammo: 20,
		pending_purchase: null,
		purchase_ready: 0,
		carry: null,
		respawn_x: 0,
		respawn_y: 0
	},
	properties: {
		fuel: { get: "vars._fuel", set: "set(vars._fuel, median(0, value, max_fuel))" },
		max_fuel: "1000",
		ammo: { get: "vars._ammo", set: "set(vars._ammo, median(0, value, max_ammo))" },
		max_ammo: "20",
		money: { get: "vars._money", set: "set(vars._money, value)" },

		buy: "def(type, amount) if(self.money >= cost and (not vars.pending_purchase),
		   [set(message_label.text, 'building ' + type), schedule(amount*5, fire_event(self, 'purchase_ready')), set(self.vars.purchase_ready, self.cycle + amount*5),add(self.money, -cost), set(self.vars.pending_purchase, object(type, 0, 0, 1))]) where cost = amount*100",
		   
		gui: "find(level.chars, value.type = 'gui_controller')",
		message_label: "get_widget(gui, 'message_label')",
		
		die_and_respawn: "def() [spawn('explosion_big_dusty', mid_x, mid_y, facing),
		                         set(me.xy, [vars.respawn_x, vars.respawn_y]),
		                         set(me.fuel, max_fuel),
								 set(me.ammo, max_ammo),
		                         set(me.hitpoints, max_hitpoints)
		                         /*set(animation, 'spawning')*/]",
		get_hit: "def(hit_by) if(me.hitpoints <= hit_by.dmg, die_and_respawn(),
		           [add(me.hitpoints, -hit_by.dmg),
		            add(me.velocity_x, (3*hit_by.velocity_x*hit_by.dmg)/100),
		            add(me.velocity_y, (3*hit_by.velocity_y*hit_by.dmg)/100)])",
		ai_ctrl_up: "mid_y > level.local_player.mid_y or ammo = 0",
		ai_ctrl_down: "false",
		ai_ctrl_left: "mid_x > level.local_player.mid_x+500 and ammo > 0",
		ai_ctrl_right: "mid_x < level.local_player.mid_x-500 or ammo = 0",
		ai_ctrl_tongue: "facing < 0 and level.local_player.mid_x > mid_x or facing > 0 and level.local_player.mid_x < mid_x",

	},
	on_create: "[set(vars.respawn_x, x), set(vars.respawn_y, y)]",
	on_collide_feet: "[if(velocity_y > 200, set(velocity_y, -velocity_y/10))]",
	
	on_process: "resolve_solid(me, 0, 2)",
	on_die: "die_and_respawn()",
	
	"hitpoints": 100,
	"id": "ai_chopper",
	always_active: true,
	"mass": 3,
	friction: 2000,
	traction_in_air: 1000,
	on_spawn_unit: "if(spawner, spawn(choose(['tank', 'infantry', 'sam', 'cannon', 'artillery']), spawner.mid_x - 150, spawner.mid_y, -1)) where spawner = choose(filter(level.chars, value.type = 'base' and value.vars.side = vars.side and abs(value.mid_x - level.local_player.mid_x) > 800))",
	on_process_flying: "[
	             if(cycle%500 = 0, fire_event('spawn_unit')),
	             if(abs(mid_x - level.local_player.mid_x) < 600 and 1d100 < 10, fire_event('ctrl_jump')), if(ai_ctrl_tongue, fire_event('ctrl_tongue')), add(money, 10*size(filter(level.chars, value.type = 'base' and value.vars.side = vars.side))),
	              if(velocity_y >= 0 and standing_on and standing_on.type = 'base' and standing_on.vars.side = vars.side,
	                 [if(hitpoints < max_hitpoints, add(hitpoints, 1)), add(fuel, 5), add(ammo, 1)]),
	              if(lift, add(fuel, -2)),
	              set(accel_y, 10 + ai_ctrl_down*40 - lift*50),
	              set(accel_x, 30*if(facing > 0, ai_ctrl_right, ai_ctrl_left) -
	                           20*if(facing < 0, ai_ctrl_right, ai_ctrl_left)),
	              if(rotate < target_rotation, add(rotate, 1),
	                 if(rotate > target_rotation, add(rotate, -1)))
	                   where target_rotation = facing*accel_x/4,
	              if(lift, add(time_in_animation, 1)),
	              if(y < level.dimensions[1] and velocity_y < 0,
	                [set(velocity_y, 400)]),
	              if(fuel = 0, die_and_respawn())]
					  where lift = ai_ctrl_up and fuel > 0",
	on_ctrl_tongue: "if(animation = 'flying', set(facing, -facing))",
	on_ctrl_jump: "if(animation = 'flying' and (not is_standing) and ammo > 0, [add(ammo, -1), spawn('missile', midpoint_x, midpoint_y+10, facing, [set(child.scale, 0.5), set(child.vars.dmg, 10), set(child.vars.side, vars.side)])])",
	on_ctrl_attack: "if(animation = 'flying', [if(vars.carry = null and standing_on and standing_on.type = 'base' and standing_on.vars.side = vars.side and vars.pending_purchase and cycle > vars.purchase_ready,
	         //picking up a unit from base
	         [set(message_label.text, ''),
	          set(vars.carry, vars.pending_purchase),
	          set(vars.pending_purchase.side, vars.side),
			  set(vars.pending_purchase, null),
			  set(scale, 1.5),
			 ],
			 
			 //see if we can pick somebody up from the battlefield
			 if(vars.carry = null and nearby_friendly,
			    [set(vars.carry, nearby_friendly),
			     remove_object(nearby_friendly),
			     set(scale, 1.5)])
			    where nearby_friendly = find(level.chars, value.side = vars.side and (not (value.type in ['base', 'chopper', 'missile'])) and abs(mid_x - value.mid_x) < 50 and abs(mid_y - value.mid_y) < 100)
			 ),
			  if(vars.carry, [set(vars.carry.mid_x, mid_x),
					          set(vars.carry.mid_y, mid_y),
							  set(vars.carry.facing, facing),
							  add_object(vars.carry),
							  set(vars.carry, null),
							  set(scale, 1.0)])])",
	on_end_flying_anim: "set(animation, 'flying')",
	on_end_spawning_animation: "set(animation, 'flying')"
}
